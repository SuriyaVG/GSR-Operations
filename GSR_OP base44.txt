
Under GSR_Operations Directory
Under Pages Directory
	File Dashboard Start
	import React, { useState, useEffect } from "react";
import { 
  MaterialIntakeLog, 
  ProductionBatch, 
  Order, 
  Customer,
  FinancialLedger 
} from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  Package, 
  Factory, 
  ShoppingCart, 
  Users, 
  TrendingUp, 
  IndianRupee,
  Calendar,
  Activity
} from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";

import StatsCard from "../components/dashboard/StatsCard";
import RecentActivity from "../components/dashboard/RecentActivity";
import ProductionMetrics from "../components/dashboard/ProductionMetrics";
import FinancialOverview from "../components/dashboard/FinancialOverview";

export default function Dashboard() {
  const [stats, setStats] = useState({
    totalMaterials: 0,
    activeBatches: 0,
    pendingOrders: 0,
    totalCustomers: 0,
    monthlyRevenue: 0,
    avgYield: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [recentActivity, setRecentActivity] = useState([]);

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    setIsLoading(true);
    try {
      const [materials, batches, orders, customers, ledger] = await Promise.all([
        MaterialIntakeLog.list('-created_date', 50),
        ProductionBatch.list('-created_date', 20),
        Order.list('-created_date', 20),
        Customer.list('-created_date', 20),
        FinancialLedger.list('-transaction_date', 50)
      ]);

      // Calculate stats
      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();
      
      const monthlyRevenue = ledger
        .filter(entry => {
          const entryDate = new Date(entry.transaction_date);
          return entry.type === 'payment' && 
                 entryDate.getMonth() === currentMonth && 
                 entryDate.getFullYear() === currentYear;
        })
        .reduce((sum, entry) => sum + entry.amount, 0);

      const activeBatches = batches.filter(batch => 
        batch.status === 'in_progress' || batch.status === 'quality_check'
      ).length;

      const pendingOrders = orders.filter(order => 
        order.status === 'pending' || order.status === 'confirmed'
      ).length;

      const avgYield = batches.length > 0 
        ? batches.reduce((sum, batch) => sum + (batch.yield_percentage || 0), 0) / batches.length 
        : 0;

      setStats({
        totalMaterials: materials.reduce((sum, m) => sum + (m.remaining_quantity || 0), 0),
        activeBatches,
        pendingOrders,
        totalCustomers: customers.length,
        monthlyRevenue,
        avgYield
      });

      // Build recent activity
      const activities = [
        ...materials.slice(0, 3).map(m => ({
          type: 'material',
          title: 'Material received',
          description: `${m.quantity} kg of raw material`,
          time: m.created_date,
          icon: Package
        })),
        ...batches.slice(0, 3).map(b => ({
          type: 'production',
          title: 'Batch created',
          description: `Batch ${b.batch_number} - ${b.output_litres}L`,
          time: b.created_date,
          icon: Factory
        })),
        ...orders.slice(0, 3).map(o => ({
          type: 'order',
          title: 'New order',
          description: `Order ${o.order_number} - â‚¹${o.total_amount}`,
          time: o.created_date,
          icon: ShoppingCart
        }))
      ].sort((a, b) => new Date(b.time) - new Date(a.time)).slice(0, 8);

      setRecentActivity(activities);
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    }
    setIsLoading(false);
  };

  return (
    <div className="p-6 space-y-8 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Welcome to GheeRoots
            </h1>
            <p className="text-amber-700 font-medium">
              {format(new Date(), "EEEE, MMMM do, yyyy")}
            </p>
          </div>
          <div className="flex gap-3">
            <Link to={createPageUrl("MaterialIntake")}>
              <Button className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg">
                <Package className="w-4 h-4 mr-2" />
                Add Material
              </Button>
            </Link>
            <Link to={createPageUrl("Production")}>
              <Button variant="outline" className="border-amber-300 hover:bg-amber-50">
                <Factory className="w-4 h-4 mr-2" />
                New Batch
              </Button>
            </Link>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatsCard
            title="Material Stock"
            value={`${stats.totalMaterials.toFixed(1)} kg`}
            icon={Package}
            color="blue"
            trend="Available inventory"
            loading={isLoading}
          />
          <StatsCard
            title="Active Batches"
            value={stats.activeBatches}
            icon={Factory}
            color="green"
            trend="In production"
            loading={isLoading}
          />
          <StatsCard
            title="Pending Orders"
            value={stats.pendingOrders}
            icon={ShoppingCart}
            color="orange"
            trend="Awaiting fulfillment"
            loading={isLoading}
          />
          <StatsCard
            title="Total Customers"
            value={stats.totalCustomers}
            icon={Users}
            color="purple"
            trend="Registered customers"
            loading={isLoading}
          />
        </div>

        {/* Financial & Production Overview */}
        <div className="grid lg:grid-cols-2 gap-6 mb-8">
          <FinancialOverview monthlyRevenue={stats.monthlyRevenue} loading={isLoading} />
          <ProductionMetrics avgYield={stats.avgYield} loading={isLoading} />
        </div>

        {/* Recent Activity */}
        <RecentActivity activities={recentActivity} loading={isLoading} />
      </div>
    </div>
  );
}

File Dashboard ended

File MaterialIntake start

import React, { useState, useEffect } from "react";
import { MaterialIntakeLog, Supplier, RawMaterial } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, Package, TrendingDown, Search } from "lucide-react";
import { Input } from "@/components/ui/input";

import MaterialIntakeForm from "../components/material/MaterialIntakeForm";
import MaterialList from "../components/material/MaterialList";
import StockSummary from "../components/material/StockSummary";

export default function MaterialIntake() {
  const [materials, setMaterials] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [rawMaterials, setRawMaterials] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [materialsData, suppliersData, rawMaterialsData] = await Promise.all([
        MaterialIntakeLog.list('-created_date', 50),
        Supplier.list(),
        RawMaterial.list()
      ]);
      
      setMaterials(materialsData);
      setSuppliers(suppliersData);
      setRawMaterials(rawMaterialsData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const handleSaveIntake = async (intakeData) => {
    try {
      await MaterialIntakeLog.create({
        ...intakeData,
        remaining_quantity: intakeData.quantity // Initialize remaining quantity
      });
      setShowForm(false);
      loadData();
    } catch (error) {
      console.error("Error saving intake:", error);
    }
  };

  const filteredMaterials = materials.filter(material => {
    if (!searchTerm) return true;
    
    const supplier = suppliers.find(s => s.id === material.supplier_id);
    const rawMaterial = rawMaterials.find(r => r.id === material.raw_material_id);
    
    return (
      supplier?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      rawMaterial?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      material.lot_number?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  });

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Material Intake</h1>
            <p className="text-amber-700 mt-1">Track raw materials and inventory</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Material Intake
          </Button>
        </div>

        {/* Stock Summary */}
        <StockSummary 
          materials={materials}
          rawMaterials={rawMaterials}
          suppliers={suppliers}
          loading={isLoading}
        />

        {/* Search */}
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200 mb-6">
          <CardContent className="p-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="Search by supplier, material, or lot number..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 border-amber-200 focus:border-amber-400"
              />
            </div>
          </CardContent>
        </Card>

        {/* Material List */}
        <MaterialList 
          materials={filteredMaterials}
          suppliers={suppliers}
          rawMaterials={rawMaterials}
          loading={isLoading}
        />

        {/* Form Modal */}
        {showForm && (
          <MaterialIntakeForm
            suppliers={suppliers}
            rawMaterials={rawMaterials}
            onSave={handleSaveIntake}
            onCancel={() => setShowForm(false)}
          />
        )}
      </div>
    </div>
  );
}
File MaterialIntake ended

File Production start

import React, { useState, useEffect } from "react";
import { ProductionBatch, BatchInput, MaterialIntakeLog, RawMaterial } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, Factory, BarChart3, Search, Filter } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import ProductionForm from "../components/production/ProductionForm";
import BatchList from "../components/production/BatchList";
import ProductionMetrics from "../components/production/ProductionMetrics";
import YieldAnalysis from "../components/production/YieldAnalysis";

export default function Production() {
  const [batches, setBatches] = useState([]);
  const [materials, setMaterials] = useState([]);
  const [rawMaterials, setRawMaterials] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [batchesData, materialsData, rawMaterialsData] = await Promise.all([
        ProductionBatch.list('-created_date', 50),
        MaterialIntakeLog.list(),
        RawMaterial.list()
      ]);
      
      setBatches(batchesData);
      setMaterials(materialsData);
      setRawMaterials(rawMaterialsData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const handleSaveBatch = async (batchData) => {
    try {
      await ProductionBatch.create(batchData);
      setShowForm(false);
      loadData();
    } catch (error) {
      console.error("Error saving batch:", error);
    }
  };

  const filteredBatches = batches.filter(batch => {
    const matchesSearch = batch.batch_number?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || batch.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Production Management</h1>
            <p className="text-amber-700 mt-1">Track batches, yield, and production efficiency</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            New Production Batch
          </Button>
        </div>

        <Tabs defaultValue="batches" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 bg-white/70 backdrop-blur-sm border border-amber-200">
            <TabsTrigger value="batches" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <Factory className="w-4 h-4 mr-2" />
              Production Batches
            </TabsTrigger>
            <TabsTrigger value="metrics" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <BarChart3 className="w-4 h-4 mr-2" />
              Production Metrics
            </TabsTrigger>
            <TabsTrigger value="yield" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <BarChart3 className="w-4 h-4 mr-2" />
              Yield Analysis
            </TabsTrigger>
          </TabsList>

          <TabsContent value="batches" className="space-y-6">
            {/* Search and Filter */}
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search by batch number..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 border-amber-200 focus:border-amber-400"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Filter className="w-4 h-4 text-gray-500" />
                    <select 
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="px-3 py-2 border border-amber-200 rounded-md focus:border-amber-400 bg-white"
                    >
                      <option value="all">All Status</option>
                      <option value="in_progress">In Progress</option>
                      <option value="completed">Completed</option>
                      <option value="quality_check">Quality Check</option>
                      <option value="approved">Approved</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <BatchList 
              batches={filteredBatches}
              loading={isLoading}
              onRefresh={loadData}
            />
          </TabsContent>

          <TabsContent value="metrics">
            <ProductionMetrics batches={batches} loading={isLoading} />
          </TabsContent>

          <TabsContent value="yield">
            <YieldAnalysis batches={batches} materials={materials} rawMaterials={rawMaterials} loading={isLoading} />
          </TabsContent>
        </Tabs>

        {/* Form Modal */}
        {showForm && (
          <ProductionForm
            materials={materials}
            rawMaterials={rawMaterials}
            onSave={handleSaveBatch}
            onCancel={() => setShowForm(false)}
          />
        )}
      </div>
    </div>
  );
}
file Production ended

file Orders start

import React, { useState, useEffect } from "react";
import { Order, OrderItem, Customer, ProductionBatch } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, ShoppingCart, Search, Filter, Package } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import OrderForm from "../components/orders/OrderForm";
import OrderList from "../components/orders/OrderList";
import OrderSummary from "../components/orders/OrderSummary";
import OrderMetrics from "../components/orders/OrderMetrics";

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [batches, setBatches] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [ordersData, customersData, batchesData] = await Promise.all([
        Order.list('-created_date', 50),
        Customer.list(),
        ProductionBatch.filter({ status: 'approved' })
      ]);
      
      setOrders(ordersData);
      setCustomers(customersData);
      setBatches(batchesData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const handleSaveOrder = async (orderData) => {
    try {
      const { items, ...order } = orderData;
      
      // Generate order number
      const orderNumber = `GR-${new Date().getFullYear()}-${String(orders.length + 1).padStart(4, '0')}`;
      
      // Create order
      const newOrder = await Order.create({
        ...order,
        order_number: orderNumber
      });

      // Create order items
      for (const item of items) {
        await OrderItem.create({
          ...item,
          order_id: newOrder.id
        });
      }

      setShowForm(false);
      loadData();
    } catch (error) {
      console.error("Error saving order:", error);
    }
  };

  const filteredOrders = orders.filter(order => {
    const customer = customers.find(c => c.id === order.customer_id);
    const matchesSearch = 
      order.order_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer?.name?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || order.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Order Management</h1>
            <p className="text-amber-700 mt-1">Track customer orders and delivery pipeline</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            New Order
          </Button>
        </div>

        <Tabs defaultValue="orders" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 bg-white/70 backdrop-blur-sm border border-amber-200">
            <TabsTrigger value="orders" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <ShoppingCart className="w-4 h-4 mr-2" />
              All Orders
            </TabsTrigger>
            <TabsTrigger value="summary" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <Package className="w-4 h-4 mr-2" />
              Order Summary
            </TabsTrigger>
            <TabsTrigger value="metrics" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <ShoppingCart className="w-4 h-4 mr-2" />
              Analytics
            </TabsTrigger>
          </TabsList>

          <TabsContent value="orders" className="space-y-6">
            {/* Search and Filter */}
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search by order number or customer name..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 border-amber-200 focus:border-amber-400"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Filter className="w-4 h-4 text-gray-500" />
                    <select 
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="px-3 py-2 border border-amber-200 rounded-md focus:border-amber-400 bg-white"
                    >
                      <option value="all">All Status</option>
                      <option value="pending">Pending</option>
                      <option value="confirmed">Confirmed</option>
                      <option value="in_production">In Production</option>
                      <option value="ready">Ready</option>
                      <option value="dispatched">Dispatched</option>
                      <option value="delivered">Delivered</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <OrderList 
              orders={filteredOrders}
              customers={customers}
              loading={isLoading}
              onRefresh={loadData}
            />
          </TabsContent>

          <TabsContent value="summary">
            <OrderSummary orders={orders} customers={customers} loading={isLoading} />
          </TabsContent>

          <TabsContent value="metrics">
            <OrderMetrics orders={orders} customers={customers} loading={isLoading} />
          </TabsContent>
        </Tabs>

        {/* Form Modal */}
        {showForm && (
          <OrderForm
            customers={customers}
            batches={batches}
            onSave={handleSaveOrder}
            onCancel={() => setShowForm(false)}
          />
        )}
      </div>
    </div>
  );
}
file Orders ended
file Customers start

import React, { useState, useEffect } from "react";
import { Customer, Order } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, Users, Search, Filter, UserPlus } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import CustomerForm from "../components/customers/CustomerForm";
import CustomerList from "../components/customers/CustomerList";
import CustomerMetrics from "../components/customers/CustomerMetrics";
import CustomerSegments from "../components/customers/CustomerSegments";

export default function Customers() {
  const [customers, setCustomers] = useState([]);
  const [orders, setOrders] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [typeFilter, setTypeFilter] = useState("all");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [customersData, ordersData] = await Promise.all([
        Customer.list('-created_date', 100),
        Order.list('-created_date', 200)
      ]);
      
      setCustomers(customersData);
      setOrders(ordersData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const handleSaveCustomer = async (customerData) => {
    try {
      await Customer.create(customerData);
      setShowForm(false);
      loadData();
    } catch (error) {
      console.error("Error saving customer:", error);
    }
  };

  const filteredCustomers = customers.filter(customer => {
    const matchesSearch = 
      customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.phone?.includes(searchTerm);
    const matchesType = typeFilter === "all" || customer.customer_type === typeFilter;
    return matchesSearch && matchesType;
  });

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Customer Management</h1>
            <p className="text-amber-700 mt-1">Manage relationships and track customer interactions</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg"
          >
            <UserPlus className="w-4 h-4 mr-2" />
            Add Customer
          </Button>
        </div>

        <Tabs defaultValue="customers" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 bg-white/70 backdrop-blur-sm border border-amber-200">
            <TabsTrigger value="customers" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <Users className="w-4 h-4 mr-2" />
              All Customers
            </TabsTrigger>
            <TabsTrigger value="segments" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <Filter className="w-4 h-4 mr-2" />
              Customer Segments
            </TabsTrigger>
            <TabsTrigger value="metrics" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <Users className="w-4 h-4 mr-2" />
              Analytics
            </TabsTrigger>
          </TabsList>

          <TabsContent value="customers" className="space-y-6">
            {/* Search and Filter */}
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search by name, email, or phone..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 border-amber-200 focus:border-amber-400"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Filter className="w-4 h-4 text-gray-500" />
                    <select 
                      value={typeFilter}
                      onChange={(e) => setTypeFilter(e.target.value)}
                      className="px-3 py-2 border border-amber-200 rounded-md focus:border-amber-400 bg-white"
                    >
                      <option value="all">All Types</option>
                      <option value="retail">Retail</option>
                      <option value="d2c">D2C</option>
                      <option value="restaurant">Restaurant</option>
                      <option value="distributor">Distributor</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <CustomerList 
              customers={filteredCustomers}
              orders={orders}
              loading={isLoading}
              onRefresh={loadData}
            />
          </TabsContent>

          <TabsContent value="segments">
            <CustomerSegments customers={customers} orders={orders} loading={isLoading} />
          </TabsContent>

          <TabsContent value="metrics">
            <CustomerMetrics customers={customers} orders={orders} loading={isLoading} />
          </TabsContent>
        </Tabs>

        {/* Form Modal */}
        {showForm && (
          <CustomerForm
            onSave={handleSaveCustomer}
            onCancel={() => setShowForm(false)}
          />
        )}
      </div>
    </div>
  );
}
file Customers ended

file Finance start 

import React, { useState, useEffect } from "react";
import { FinancialLedger, Order, Customer, Supplier } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, CreditCard, Search, Filter, IndianRupee } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import TransactionForm from "../components/finance/TransactionForm";
import TransactionList from "../components/finance/TransactionList";
import FinanceMetrics from "../components/finance/FinanceMetrics";
import CashFlow from "../components/finance/CashFlow";

export default function Finance() {
  const [transactions, setTransactions] = useState([]);
  const [orders, setOrders] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [typeFilter, setTypeFilter] = useState("all");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [transactionsData, ordersData, customersData, suppliersData] = await Promise.all([
        FinancialLedger.list('-transaction_date', 100),
        Order.list(),
        Customer.list(),
        Supplier.list()
      ]);
      
      setTransactions(transactionsData);
      setOrders(ordersData);
      setCustomers(customersData);
      setSuppliers(suppliersData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const handleSaveTransaction = async (transactionData) => {
    try {
      await FinancialLedger.create(transactionData);
      setShowForm(false);
      loadData();
    } catch (error) {
      console.error("Error saving transaction:", error);
    }
  };

  const filteredTransactions = transactions.filter(transaction => {
    const customer = customers.find(c => c.id === transaction.customer_id);
    const supplier = suppliers.find(s => s.id === transaction.supplier_id);
    
    const matchesSearch = 
      transaction.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      supplier?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.reference_id?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesType = typeFilter === "all" || transaction.type === typeFilter;
    return matchesSearch && matchesType;
  });

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-amber-50 to-orange-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Financial Management</h1>
            <p className="text-amber-700 mt-1">Track payments, expenses, and cash flow</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Transaction
          </Button>
        </div>

        <Tabs defaultValue="transactions" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 bg-white/70 backdrop-blur-sm border border-amber-200">
            <TabsTrigger value="transactions" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <CreditCard className="w-4 h-4 mr-2" />
              All Transactions
            </TabsTrigger>
            <TabsTrigger value="cashflow" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <IndianRupee className="w-4 h-4 mr-2" />
              Cash Flow
            </TabsTrigger>
            <TabsTrigger value="metrics" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-800">
              <CreditCard className="w-4 h-4 mr-2" />
              Analytics
            </TabsTrigger>
          </TabsList>

          <TabsContent value="transactions" className="space-y-6">
            {/* Search and Filter */}
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search transactions..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 border-amber-200 focus:border-amber-400"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Filter className="w-4 h-4 text-gray-500" />
                    <select 
                      value={typeFilter}
                      onChange={(e) => setTypeFilter(e.target.value)}
                      className="px-3 py-2 border border-amber-200 rounded-md focus:border-amber-400 bg-white"
                    >
                      <option value="all">All Types</option>
                      <option value="payment">Payment</option>
                      <option value="expense">Expense</option>
                      <option value="credit_note">Credit Note</option>
                      <option value="invoice">Invoice</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <TransactionList 
              transactions={filteredTransactions}
              customers={customers}
              suppliers={suppliers}
              loading={isLoading}
              onRefresh={loadData}
            />
          </TabsContent>

          <TabsContent value="cashflow">
            <CashFlow transactions={transactions} loading={isLoading} />
          </TabsContent>

          <TabsContent value="metrics">
            <FinanceMetrics transactions={transactions} loading={isLoading} />
          </TabsContent>
        </Tabs>

        {/* Form Modal */}
        {showForm && (
          <TransactionForm
            customers={customers}
            suppliers={suppliers}
            orders={orders}
            onSave={handleSaveTransaction}
            onCancel={() => setShowForm(false)}
          />
        )}
      </div>
    </div>
  );
}


file Finance ended
Pages Directory Ended

Under Components directory
Under under dashboard directory
file StatsCard Start

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { TrendingUp } from "lucide-react";

const colorVariants = {
  blue: "from-blue-500 to-cyan-500",
  green: "from-green-500 to-emerald-500", 
  orange: "from-orange-500 to-amber-500",
  purple: "from-purple-500 to-violet-500"
};

export default function StatsCard({ title, value, icon: Icon, color, trend, loading }) {
  if (loading) {
    return (
      <Card className="relative overflow-hidden bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader className="p-6">
          <div className="flex justify-between items-start">
            <div>
              <Skeleton className="h-4 w-24 mb-2" />
              <Skeleton className="h-8 w-16" />
            </div>
            <Skeleton className="w-12 h-12 rounded-xl" />
          </div>
          <Skeleton className="h-4 w-20 mt-4" />
        </CardHeader>
      </Card>
    );
  }

  return (
    <Card className="relative overflow-hidden bg-white/70 backdrop-blur-sm border-amber-200 hover:shadow-lg transition-all duration-300">
      <div className={`absolute top-0 right-0 w-32 h-32 bg-gradient-to-br ${colorVariants[color]} opacity-10 rounded-full transform translate-x-8 -translate-y-8`} />
      <CardHeader className="p-6">
        <div className="flex justify-between items-start">
          <div>
            <p className="text-sm font-medium text-amber-700 mb-1">{title}</p>
            <CardTitle className="text-2xl font-bold text-gray-900">
              {value}
            </CardTitle>
          </div>
          <div className={`p-3 rounded-xl bg-gradient-to-br ${colorVariants[color]} bg-opacity-20`}>
            <Icon className={`w-6 h-6 text-${color}-600`} />
          </div>
        </div>
        {trend && (
          <div className="flex items-center mt-4 text-sm">
            <TrendingUp className="w-4 h-4 mr-1 text-green-500" />
            <span className="text-gray-600">{trend}</span>
          </div>
        )}
      </CardHeader>
    </Card>
  );
}

file StatsCard ended

File RecentActivity started

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { formatDistanceToNow } from "date-fns";
import { Activity } from "lucide-react";

export default function RecentActivity({ activities, loading }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5" />
            Recent Activity
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {Array(5).fill(0).map((_, i) => (
              <div key={i} className="flex items-center gap-4">
                <Skeleton className="w-10 h-10 rounded-full" />
                <div className="flex-1">
                  <Skeleton className="h-4 w-32 mb-1" />
                  <Skeleton className="h-3 w-48" />
                </div>
                <Skeleton className="h-3 w-16" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-gray-900">
          <Activity className="w-5 h-5 text-amber-600" />
          Recent Activity
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {activities.length === 0 ? (
            <p className="text-gray-500 text-center py-8">No recent activity</p>
          ) : (
            activities.map((activity, index) => (
              <div key={index} className="flex items-center gap-4 p-3 rounded-lg hover:bg-amber-50 transition-colors">
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center">
                  <activity.icon className="w-5 h-5 text-white" />
                </div>
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{activity.title}</p>
                  <p className="text-sm text-gray-600">{activity.description}</p>
                </div>
                <p className="text-xs text-amber-600 font-medium">
                  {formatDistanceToNow(new Date(activity.time), { addSuffix: true })}
                </p>
              </div>
            ))
          )}
        </div>
      </CardContent>
    </Card>
  );
}

File RecentActivity ended

File FinancialOverview Start

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { IndianRupee, TrendingUp } from "lucide-react";

export default function FinancialOverview({ monthlyRevenue, loading }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <IndianRupee className="w-5 h-5" />
            Financial Overview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Skeleton className="h-8 w-32" />
            <Skeleton className="h-4 w-24" />
            <div className="grid grid-cols-2 gap-4 mt-6">
              <Skeleton className="h-20" />
              <Skeleton className="h-20" />
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-gray-900">
          <IndianRupee className="w-5 h-5 text-amber-600" />
          Financial Overview
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <p className="text-sm text-amber-700 font-medium">This Month's Revenue</p>
            <p className="text-3xl font-bold text-gray-900">
              â‚¹{monthlyRevenue.toLocaleString('en-IN')}
            </p>
          </div>
          
          <div className="flex items-center text-sm">
            <TrendingUp className="w-4 h-4 mr-1 text-green-500" />
            <span className="text-green-600 font-medium">Growth this month</span>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mt-6">
            <div className="p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg border border-green-200">
              <p className="text-sm text-green-700 font-medium">Payments Received</p>
              <p className="text-lg font-bold text-green-800">â‚¹{monthlyRevenue.toLocaleString('en-IN')}</p>
            </div>
            <div className="p-4 bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg border border-orange-200">
              <p className="text-sm text-orange-700 font-medium">Outstanding</p>
              <p className="text-lg font-bold text-orange-800">â‚¹0</p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

File FinancialOverview ended

File ProductionMetrics start 

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Factory, Target } from "lucide-react";

export default function ProductionMetrics({ avgYield, loading }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Factory className="w-5 h-5" />
            Production Metrics
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Skeleton className="h-8 w-24" />
            <Skeleton className="h-4 w-32" />
            <div className="grid grid-cols-2 gap-4 mt-6">
              <Skeleton className="h-20" />
              <Skeleton className="h-20" />
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-gray-900">
          <Factory className="w-5 h-5 text-amber-600" />
          Production Metrics
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <p className="text-sm text-amber-700 font-medium">Average Yield</p>
            <p className="text-3xl font-bold text-gray-900">
              {avgYield.toFixed(1)}%
            </p>
          </div>
          
          <div className="flex items-center text-sm">
            <Target className="w-4 h-4 mr-1 text-blue-500" />
            <span className="text-blue-600 font-medium">Production efficiency</span>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mt-6">
            <div className="p-4 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
              <p className="text-sm text-blue-700 font-medium">Batches Today</p>
              <p className="text-lg font-bold text-blue-800">0</p>
            </div>
            <div className="p-4 bg-gradient-to-br from-purple-50 to-violet-50 rounded-lg border border-purple-200">
              <p className="text-sm text-purple-700 font-medium">Quality Check</p>
              <p className="text-lg font-bold text-purple-800">0</p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

File ProductionMetrics ended

directory dashboard ended

under material directory 
file StockSummary started

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { IndianRupee, Layers, Truck, BarChart } from 'lucide-react';

export default function StockSummary({ materials, rawMaterials, suppliers, loading }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200 mb-6">
        <CardContent className="p-4 grid grid-cols-1 md:grid-cols-4 gap-4">
          <Skeleton className="h-24 rounded-lg" />
          <Skeleton className="h-24 rounded-lg" />
          <Skeleton className="h-24 rounded-lg" />
          <Skeleton className="h-24 rounded-lg" />
        </CardContent>
      </Card>
    );
  }

  const stockValue = materials.reduce((sum, m) => sum + (m.remaining_quantity * m.cost_per_unit), 0);
  const distinctMaterials = new Set(materials.map(m => m.raw_material_id)).size;

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200 mb-6">
      <CardContent className="p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="p-4 rounded-lg bg-gradient-to-br from-blue-50 to-cyan-50 border border-blue-200">
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-blue-700">Total Stock Value</p>
            <IndianRupee className="w-5 h-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900 mt-1">â‚¹{stockValue.toLocaleString('en-IN')}</p>
        </div>
        <div className="p-4 rounded-lg bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200">
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-green-700">Distinct Materials</p>
            <Layers className="w-5 h-5 text-green-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900 mt-1">{distinctMaterials}</p>
        </div>
        <div className="p-4 rounded-lg bg-gradient-to-br from-purple-50 to-violet-50 border border-purple-200">
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-purple-700">Total Suppliers</p>
            <Truck className="w-5 h-5 text-purple-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900 mt-1">{suppliers.length}</p>
        </div>
        <div className="p-4 rounded-lg bg-gradient-to-br from-orange-50 to-amber-50 border border-orange-200">
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-orange-700">Low Stock Items</p>
            <BarChart className="w-5 h-5 text-orange-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900 mt-1">0</p>
        </div>
      </CardContent>
    </Card>
  );
}

file StockSummary ended



file MaterialList started

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { format } from 'date-fns';

export default function MaterialList({ materials, suppliers, rawMaterials, loading }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead><Skeleton className="h-4 w-24" /></TableHead>
                <TableHead><Skeleton className="h-4 w-32" /></TableHead>
                <TableHead><Skeleton className="h-4 w-32" /></TableHead>
                <TableHead><Skeleton className="h-4 w-20" /></TableHead>
                <TableHead><Skeleton className="h-4 w-16" /></TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  <TableCell><Skeleton className="h-4 w-full" /></TableCell>
                  <TableCell><Skeleton className="h-4 w-full" /></TableCell>
                  <TableCell><Skeleton className="h-4 w-full" /></TableCell>
                  <TableCell><Skeleton className="h-4 w-full" /></TableCell>
                  <TableCell><Skeleton className="h-4 w-full" /></TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  }

  const getSupplierName = (id) => suppliers.find(s => s.id === id)?.name || 'N/A';
  const getRawMaterialName = (id) => rawMaterials.find(r => r.id === id)?.name || 'N/A';

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-amber-50">
              <TableHead>Intake Date</TableHead>
              <TableHead>Supplier</TableHead>
              <TableHead>Material</TableHead>
              <TableHead>Lot #</TableHead>
              <TableHead className="text-right">Quantity</TableHead>
              <TableHead className="text-right">Remaining</TableHead>
              <TableHead className="text-right">Cost/Unit</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {materials.map(material => (
              <TableRow key={material.id} className="hover:bg-amber-50 transition-colors">
                <TableCell>{format(new Date(material.intake_date), 'MMM d, yyyy')}</TableCell>
                <TableCell>{getSupplierName(material.supplier_id)}</TableCell>
                <TableCell>{getRawMaterialName(material.raw_material_id)}</TableCell>
                <TableCell>
                  <Badge variant="outline" className="border-amber-300">{material.lot_number || 'N/A'}</Badge>
                </TableCell>
                <TableCell className="text-right font-medium">{material.quantity}</TableCell>
                <TableCell className="text-right font-semibold text-green-600">{material.remaining_quantity}</TableCell>
                <TableCell className="text-right">â‚¹{material.cost_per_unit.toFixed(2)}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}

file MaterialList ended


file MaterialIntakeForm started

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { format } from 'date-fns';

export default function MaterialIntakeForm({ suppliers, rawMaterials, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    supplier_id: '',
    raw_material_id: '',
    quantity: '',
    cost_per_unit: '',
    lot_number: '',
    intake_date: format(new Date(), 'yyyy-MM-dd'),
    expiry_date: '',
    quality_notes: '',
  });

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const total_cost = parseFloat(formData.quantity) * parseFloat(formData.cost_per_unit);
    onSave({ ...formData, total_cost, quantity: parseFloat(formData.quantity), cost_per_unit: parseFloat(formData.cost_per_unit) });
  };

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-2xl bg-white/90 backdrop-blur-sm border-amber-200">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">New Material Intake</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 py-4">
            <div className="space-y-2">
              <Label htmlFor="supplier_id">Supplier</Label>
              <Select onValueChange={(value) => handleChange('supplier_id', value)}>
                <SelectTrigger id="supplier_id"><SelectValue placeholder="Select supplier" /></SelectTrigger>
                <SelectContent>
                  {suppliers.map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="raw_material_id">Raw Material</Label>
              <Select onValueChange={(value) => handleChange('raw_material_id', value)}>
                <SelectTrigger id="raw_material_id"><SelectValue placeholder="Select material" /></SelectTrigger>
                <SelectContent>
                  {rawMaterials.map(r => <SelectItem key={r.id} value={r.id}>{r.name} ({r.unit})</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="quantity">Quantity</Label>
              <Input id="quantity" type="number" value={formData.quantity} onChange={(e) => handleChange('quantity', e.target.value)} required />
            </div>
            <div className="space-y-2">
              <Label htmlFor="cost_per_unit">Cost per Unit (â‚¹)</Label>
              <Input id="cost_per_unit" type="number" value={formData.cost_per_unit} onChange={(e) => handleChange('cost_per_unit', e.target.value)} required />
            </div>
            <div className="space-y-2">
              <Label htmlFor="lot_number">Lot Number</Label>
              <Input id="lot_number" value={formData.lot_number} onChange={(e) => handleChange('lot_number', e.target.value)} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="intake_date">Intake Date</Label>
              <Input id="intake_date" type="date" value={formData.intake_date} onChange={(e) => handleChange('intake_date', e.target.value)} required />
            </div>
            <div className="space-y-2">
              <Label htmlFor="expiry_date">Expiry Date</Label>
              <Input id="expiry_date" type="date" value={formData.expiry_date} onChange={(e) => handleChange('expiry_date', e.target.value)} />
            </div>
            <div className="space-y-2 md:col-span-2">
              <Label htmlFor="quality_notes">Quality Notes</Label>
              <Textarea id="quality_notes" value={formData.quality_notes} onChange={(e) => handleChange('quality_notes', e.target.value)} />
            </div>
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
            </DialogClose>
            <Button type="submit" className="bg-gradient-to-r from-amber-500 to-orange-500 text-white">Save Intake</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}



file MaterialIntakeForm ended


Directory material ended
Under production directory

file ProductionForm started

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { format } from 'date-fns';
import { Calculator, Plus, X } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function ProductionForm({ materials, rawMaterials, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    batch_number: `GR-${format(new Date(), 'yyyyMMdd')}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,
    production_date: format(new Date(), 'yyyy-MM-dd'),
    output_litres: '',
    quality_notes: '',
    status: 'in_progress'
  });

  const [selectedInputs, setSelectedInputs] = useState([]);

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const addInput = () => {
    setSelectedInputs(prev => [...prev, { material_intake_id: '', quantity_used: '' }]);
  };

  const removeInput = (index) => {
    setSelectedInputs(prev => prev.filter((_, i) => i !== index));
  };

  const updateInput = (index, field, value) => {
    setSelectedInputs(prev => 
      prev.map((input, i) => i === index ? { ...input, [field]: value } : input)
    );
  };

  const calculateTotalCost = () => {
    return selectedInputs.reduce((total, input) => {
      const material = materials.find(m => m.id === input.material_intake_id);
      return total + (material ? material.cost_per_unit * (parseFloat(input.quantity_used) || 0) : 0);
    }, 0);
  };

  const calculateCostPerLitre = () => {
    const totalCost = calculateTotalCost();
    const outputLitres = parseFloat(formData.output_litres) || 0;
    return outputLitres > 0 ? totalCost / outputLitres : 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const totalCost = calculateTotalCost();
    const costPerLitre = calculateCostPerLitre();
    
    onSave({
      ...formData,
      output_litres: parseFloat(formData.output_litres),
      total_input_cost: totalCost,
      cost_per_litre: costPerLitre,
      yield_percentage: 0, // Will be calculated based on inputs
      inputs: selectedInputs
    });
  };

  const availableMaterials = materials.filter(m => m.remaining_quantity > 0);
  const getRawMaterialName = (materialId) => {
    const material = materials.find(m => m.id === materialId);
    const rawMaterial = rawMaterials.find(r => r.id === material?.raw_material_id);
    return rawMaterial?.name || 'Unknown';
  };

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto bg-white/95 backdrop-blur-sm border-amber-200">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">New Production Batch</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Batch Information</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="batch_number">Batch Number</Label>
                <Input 
                  id="batch_number" 
                  value={formData.batch_number} 
                  onChange={(e) => handleChange('batch_number', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="production_date">Production Date</Label>
                <Input 
                  id="production_date" 
                  type="date" 
                  value={formData.production_date} 
                  onChange={(e) => handleChange('production_date', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="output_litres">Output (Litres)</Label>
                <Input 
                  id="output_litres" 
                  type="number" 
                  step="0.1"
                  value={formData.output_litres} 
                  onChange={(e) => handleChange('output_litres', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="status">Status</Label>
                <Select value={formData.status} onValueChange={(value) => handleChange('status', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="in_progress">In Progress</SelectItem>
                    <SelectItem value="completed">Completed</SelectItem>
                    <SelectItem value="quality_check">Quality Check</SelectItem>
                    <SelectItem value="approved">Approved</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="quality_notes">Quality Notes</Label>
                <Textarea 
                  id="quality_notes" 
                  value={formData.quality_notes} 
                  onChange={(e) => handleChange('quality_notes', e.target.value)} 
                  placeholder="Quality assessment, color, texture, aroma notes..."
                />
              </div>
            </CardContent>
          </Card>

          {/* Input Materials */}
          <Card className="border-amber-200">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-lg">Input Materials</CardTitle>
                <Button type="button" onClick={addInput} variant="outline" size="sm">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Material
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {selectedInputs.map((input, index) => (
                <div key={index} className="flex gap-4 items-end p-4 bg-amber-50 rounded-lg">
                  <div className="flex-1 space-y-2">
                    <Label>Material</Label>
                    <Select 
                      value={input.material_intake_id} 
                      onValueChange={(value) => updateInput(index, 'material_intake_id', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select material" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableMaterials.map(material => (
                          <SelectItem key={material.id} value={material.id}>
                            {getRawMaterialName(material.id)} - {material.remaining_quantity} kg @ â‚¹{material.cost_per_unit}/kg
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="w-32 space-y-2">
                    <Label>Quantity (kg)</Label>
                    <Input 
                      type="number" 
                      step="0.1"
                      value={input.quantity_used}
                      onChange={(e) => updateInput(index, 'quantity_used', e.target.value)}
                      placeholder="0.0"
                    />
                  </div>
                  <Button 
                    type="button" 
                    onClick={() => removeInput(index)} 
                    variant="outline" 
                    size="icon"
                    className="text-red-500 hover:text-red-700"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              ))}
              
              {selectedInputs.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <Calculator className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>Add input materials to calculate batch cost</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Cost Summary */}
          {selectedInputs.length > 0 && (
            <Card className="border-amber-200 bg-gradient-to-r from-amber-50 to-orange-50">
              <CardContent className="p-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                  <div>
                    <p className="text-sm text-amber-700 font-medium">Total Input Cost</p>
                    <p className="text-xl font-bold text-gray-900">â‚¹{calculateTotalCost().toFixed(2)}</p>
                  </div>
                  <div>
                    <p className="text-sm text-amber-700 font-medium">Cost per Litre</p>
                    <p className="text-xl font-bold text-gray-900">â‚¹{calculateCostPerLitre().toFixed(2)}</p>
                  </div>
                  <div>
                    <p className="text-sm text-amber-700 font-medium">Expected Output</p>
                    <p className="text-xl font-bold text-gray-900">{formData.output_litres || 0}L</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          <DialogFooter className="gap-2">
            <Button type="button" variant="outline" onClick={onCancel}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              className="bg-gradient-to-r from-amber-500 to-orange-500 text-white"
              disabled={selectedInputs.length === 0}
            >
              Create Batch
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

file ProductionForm Ended


file BatchList started

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { format } from 'date-fns';
import { Eye, MoreHorizontal, CheckCircle, Clock, AlertTriangle } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const statusConfig = {
  in_progress: { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: Clock },
  completed: { color: 'bg-green-100 text-green-800 border-green-200', icon: CheckCircle },
  quality_check: { color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: AlertTriangle },
  approved: { color: 'bg-emerald-100 text-emerald-800 border-emerald-200', icon: CheckCircle }
};

export default function BatchList({ batches, loading, onRefresh }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Production Batches</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                {Array(7).fill(0).map((_, i) => (
                  <TableHead key={i}><Skeleton className="h-4 w-20" /></TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  {Array(7).fill(0).map((_, j) => (
                    <TableCell key={j}><Skeleton className="h-4 w-full" /></TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-bold text-gray-900">Production Batches</CardTitle>
          <Button variant="outline" size="sm" onClick={onRefresh}>
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-amber-50">
              <TableHead>Batch Number</TableHead>
              <TableHead>Production Date</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="text-right">Output (L)</TableHead>
              <TableHead className="text-right">Cost/L</TableHead>
              <TableHead className="text-right">Total Cost</TableHead>
              <TableHead className="text-right">Yield %</TableHead>
              <TableHead className="w-12"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {batches.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  No production batches found. Create your first batch to get started.
                </TableCell>
              </TableRow>
            ) : (
              batches.map(batch => {
                const statusInfo = statusConfig[batch.status] || statusConfig.in_progress;
                const StatusIcon = statusInfo.icon;
                
                return (
                  <TableRow key={batch.id} className="hover:bg-amber-50 transition-colors">
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 rounded-full bg-amber-400"></div>
                        {batch.batch_number}
                      </div>
                    </TableCell>
                    <TableCell>{format(new Date(batch.production_date), 'MMM d, yyyy')}</TableCell>
                    <TableCell>
                      <Badge className={`${statusInfo.color} border flex items-center gap-1 w-fit`}>
                        <StatusIcon className="w-3 h-3" />
                        {batch.status.replace('_', ' ')}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right font-medium">{batch.output_litres?.toFixed(1) || '0'}</TableCell>
                    <TableCell className="text-right">â‚¹{batch.cost_per_litre?.toFixed(2) || '0.00'}</TableCell>
                    <TableCell className="text-right">â‚¹{batch.total_input_cost?.toFixed(2) || '0.00'}</TableCell>
                    <TableCell className="text-right">
                      <span className={`font-medium ${
                        (batch.yield_percentage || 0) > 80 ? 'text-green-600' : 
                        (batch.yield_percentage || 0) > 60 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {batch.yield_percentage?.toFixed(1) || '0.0'}%
                      </span>
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            <Eye className="w-4 h-4 mr-2" />
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Edit Batch
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Update Status
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}

file BatchList Ended


file ProductionMetrics started

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';
import { Factory, TrendingUp, Target, Clock } from 'lucide-react';

export default function ProductionMetrics({ batches, loading }) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {Array(4).fill(0).map((_, i) => (
          <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
            <CardHeader>
              <Skeleton className="h-6 w-32" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-64 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  // Calculate metrics
  const totalProduction = batches.reduce((sum, batch) => sum + (batch.output_litres || 0), 0);
  const avgYield = batches.length > 0 
    ? batches.reduce((sum, batch) => sum + (batch.yield_percentage || 0), 0) / batches.length 
    : 0;
  const avgCostPerLitre = batches.length > 0
    ? batches.reduce((sum, batch) => sum + (batch.cost_per_litre || 0), 0) / batches.length
    : 0;
  const activeBatches = batches.filter(b => b.status === 'in_progress' || b.status === 'quality_check').length;

  // Prepare chart data
  const monthlyData = batches.reduce((acc, batch) => {
    const month = new Date(batch.production_date).toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
    const existing = acc.find(item => item.month === month);
    if (existing) {
      existing.production += batch.output_litres || 0;
      existing.batches += 1;
    } else {
      acc.push({
        month,
        production: batch.output_litres || 0,
        batches: 1,
        avgYield: batch.yield_percentage || 0
      });
    }
    return acc;
  }, []).slice(-6);

  const yieldTrendData = batches.slice(-10).map((batch, index) => ({
    batch: `B${index + 1}`,
    yield: batch.yield_percentage || 0,
    cost: batch.cost_per_litre || 0
  }));

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Total Production</p>
                <p className="text-2xl font-bold text-gray-900">{totalProduction.toFixed(1)}L</p>
              </div>
              <Factory className="w-8 h-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Average Yield</p>
                <p className="text-2xl font-bold text-gray-900">{avgYield.toFixed(1)}%</p>
              </div>
              <Target className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Avg Cost/Litre</p>
                <p className="text-2xl font-bold text-gray-900">â‚¹{avgCostPerLitre.toFixed(2)}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Active Batches</p>
                <p className="text-2xl font-bold text-gray-900">{activeBatches}</p>
              </div>
              <Clock className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Monthly Production</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={monthlyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="production" fill="#f59e0b" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Yield Trend (Last 10 Batches)</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={yieldTrendData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="batch" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="yield" stroke="#10b981" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

file ProductionMetrics Ended


file YieldAnalysis started

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { TrendingUp, TrendingDown, Minus } from 'lucide-react';

export default function YieldAnalysis({ batches, materials, rawMaterials, loading }) {
  if (loading) {
    return (
      <div className="space-y-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <Skeleton className="h-6 w-48" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-64 w-full" />
          </CardContent>
        </Card>
      </div>
    );
  }

  // Group batches by material type and calculate yields
  const materialYields = rawMaterials.map(rawMaterial => {
    const relevantBatches = batches.filter(batch => {
      // This would need to be enhanced to properly link batches to materials
      return batch.yield_percentage > 0;
    });

    const avgYield = relevantBatches.length > 0
      ? relevantBatches.reduce((sum, batch) => sum + batch.yield_percentage, 0) / relevantBatches.length
      : 0;

    const totalProduction = relevantBatches.reduce((sum, batch) => sum + (batch.output_litres || 0), 0);
    const avgCost = relevantBatches.length > 0
      ? relevantBatches.reduce((sum, batch) => sum + (batch.cost_per_litre || 0), 0) / relevantBatches.length
      : 0;

    return {
      material: rawMaterial.name,
      avgYield: avgYield,
      totalProduction: totalProduction,
      avgCost: avgCost,
      batchCount: relevantBatches.length,
      trend: avgYield > 75 ? 'up' : avgYield > 50 ? 'stable' : 'down'
    };
  }).filter(item => item.batchCount > 0);

  // Recent batch performance
  const recentBatches = batches.slice(-10).map(batch => ({
    batchNumber: batch.batch_number,
    yield: batch.yield_percentage || 0,
    cost: batch.cost_per_litre || 0,
    output: batch.output_litres || 0,
    efficiency: (batch.yield_percentage || 0) > 80 ? 'excellent' : 
                (batch.yield_percentage || 0) > 60 ? 'good' : 'needs_improvement'
  }));

  const getTrendIcon = (trend) => {
    switch (trend) {
      case 'up': return <TrendingUp className="w-4 h-4 text-green-500" />;
      case 'down': return <TrendingDown className="w-4 h-4 text-red-500" />;
      default: return <Minus className="w-4 h-4 text-gray-500" />;
    }
  };

  const getEfficiencyColor = (efficiency) => {
    switch (efficiency) {
      case 'excellent': return 'bg-green-100 text-green-800 border-green-200';
      case 'good': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'needs_improvement': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="space-y-6">
      {/* Material Yield Analysis */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Yield Analysis by Material Type</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Material</TableHead>
                <TableHead>Avg Yield %</TableHead>
                <TableHead>Total Production (L)</TableHead>
                <TableHead>Avg Cost/L</TableHead>
                <TableHead>Batches</TableHead>
                <TableHead>Trend</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {materialYields.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-8 text-gray-500">
                    No yield data available. Complete some production batches to see analysis.
                  </TableCell>
                </TableRow>
              ) : (
                materialYields.map((item, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-medium">{item.material}</TableCell>
                    <TableCell>
                      <span className={`font-semibold ${
                        item.avgYield > 80 ? 'text-green-600' :
                        item.avgYield > 60 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {item.avgYield.toFixed(1)}%
                      </span>
                    </TableCell>
                    <TableCell>{item.totalProduction.toFixed(1)}L</TableCell>
                    <TableCell>â‚¹{item.avgCost.toFixed(2)}</TableCell>
                    <TableCell>{item.batchCount}</TableCell>
                    <TableCell>{getTrendIcon(item.trend)}</TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Recent Batch Performance */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Recent Batch Performance</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Batch Number</TableHead>
                <TableHead>Yield %</TableHead>
                <TableHead>Output (L)</TableHead>
                <TableHead>Cost/L</TableHead>
                <TableHead>Efficiency</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {recentBatches.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                    No recent batch data available.
                  </TableCell>
                </TableRow>
              ) : (
                recentBatches.map((batch, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-medium">{batch.batchNumber}</TableCell>
                    <TableCell>
                      <span className={`font-semibold ${
                        batch.yield > 80 ? 'text-green-600' :
                        batch.yield > 60 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {batch.yield.toFixed(1)}%
                      </span>
                    </TableCell>
                    <TableCell>{batch.output.toFixed(1)}L</TableCell>
                    <TableCell>â‚¹{batch.cost.toFixed(2)}</TableCell>
                    <TableCell>
                      <Badge className={`${getEfficiencyColor(batch.efficiency)} border`}>
                        {batch.efficiency.replace('_', ' ')}
                      </Badge>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}




file YieldAnalysis Ended

Directory production ended

Under Directory orders


file OrderForm Start

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { format } from 'date-fns';
import { Plus, X, Calculator } from 'lucide-react';

export default function OrderForm({ customers, batches, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    customer_id: '',
    order_date: format(new Date(), 'yyyy-MM-dd'),
    expected_delivery: '',
    status: 'pending',
    payment_status: 'pending',
    discount_amount: 0,
    notes: ''
  });

  const [orderItems, setOrderItems] = useState([{
    batch_id: '',
    product_name: '',
    quantity: '',
    unit_price: '',
    packaging_type: '500ml_jar'
  }]);

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const addItem = () => {
    setOrderItems(prev => [...prev, {
      batch_id: '',
      product_name: '',
      quantity: '',
      unit_price: '',
      packaging_type: '500ml_jar'
    }]);
  };

  const removeItem = (index) => {
    setOrderItems(prev => prev.filter((_, i) => i !== index));
  };

  const updateItem = (index, field, value) => {
    setOrderItems(prev => 
      prev.map((item, i) => i === index ? { ...item, [field]: value } : item)
    );
  };

  const calculateTotals = () => {
    const subtotal = orderItems.reduce((sum, item) => {
      return sum + ((parseFloat(item.quantity) || 0) * (parseFloat(item.unit_price) || 0));
    }, 0);
    
    const discount = parseFloat(formData.discount_amount) || 0;
    const taxableAmount = subtotal - discount;
    const tax = taxableAmount * 0.18; // 18% GST
    const total = taxableAmount + tax;
    
    return { subtotal, discount, tax, total };
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const { subtotal, tax, total } = calculateTotals();
    
    const items = orderItems.map(item => ({
      ...item,
      quantity: parseFloat(item.quantity),
      unit_price: parseFloat(item.unit_price),
      total_price: (parseFloat(item.quantity) || 0) * (parseFloat(item.unit_price) || 0)
    }));

    onSave({
      ...formData,
      total_amount: subtotal,
      tax_amount: tax,
      net_amount: total,
      items
    });
  };

  const { subtotal, discount, tax, total } = calculateTotals();

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto bg-white/95 backdrop-blur-sm border-amber-200">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">New Customer Order</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Order Information */}
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Order Details</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="customer_id">Customer</Label>
                <Select value={formData.customer_id} onValueChange={(value) => handleChange('customer_id', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select customer" />
                  </SelectTrigger>
                  <SelectContent>
                    {customers.map(customer => (
                      <SelectItem key={customer.id} value={customer.id}>
                        {customer.name} - {customer.customer_type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="order_date">Order Date</Label>
                <Input 
                  id="order_date" 
                  type="date" 
                  value={formData.order_date} 
                  onChange={(e) => handleChange('order_date', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="expected_delivery">Expected Delivery</Label>
                <Input 
                  id="expected_delivery" 
                  type="date" 
                  value={formData.expected_delivery} 
                  onChange={(e) => handleChange('expected_delivery', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="discount_amount">Discount Amount (â‚¹)</Label>
                <Input 
                  id="discount_amount" 
                  type="number" 
                  step="0.01"
                  value={formData.discount_amount} 
                  onChange={(e) => handleChange('discount_amount', e.target.value)} 
                />
              </div>
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="notes">Order Notes</Label>
                <Textarea 
                  id="notes" 
                  value={formData.notes} 
                  onChange={(e) => handleChange('notes', e.target.value)} 
                  placeholder="Special instructions, delivery notes..."
                />
              </div>
            </CardContent>
          </Card>

          {/* Order Items */}
          <Card className="border-amber-200">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-lg">Order Items</CardTitle>
                <Button type="button" onClick={addItem} variant="outline" size="sm">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Item
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {orderItems.map((item, index) => (
                <div key={index} className="grid grid-cols-1 md:grid-cols-6 gap-4 p-4 bg-amber-50 rounded-lg">
                  <div className="space-y-2">
                    <Label>Product Name</Label>
                    <Input 
                      value={item.product_name}
                      onChange={(e) => updateItem(index, 'product_name', e.target.value)}
                      placeholder="GSR Ghee 500ml"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Batch</Label>
                    <Select 
                      value={item.batch_id} 
                      onValueChange={(value) => updateItem(index, 'batch_id', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select batch" />
                      </SelectTrigger>
                      <SelectContent>
                        {batches.map(batch => (
                          <SelectItem key={batch.id} value={batch.id}>
                            {batch.batch_number} - {batch.output_litres}L
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Packaging</Label>
                    <Select 
                      value={item.packaging_type} 
                      onValueChange={(value) => updateItem(index, 'packaging_type', value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="500ml_jar">500ml Jar</SelectItem>
                        <SelectItem value="1000ml_jar">1000ml Jar</SelectItem>
                        <SelectItem value="250ml_jar">250ml Jar</SelectItem>
                        <SelectItem value="bulk">Bulk</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Quantity</Label>
                    <Input 
                      type="number" 
                      value={item.quantity}
                      onChange={(e) => updateItem(index, 'quantity', e.target.value)}
                      placeholder="0"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Unit Price (â‚¹)</Label>
                    <Input 
                      type="number" 
                      step="0.01"
                      value={item.unit_price}
                      onChange={(e) => updateItem(index, 'unit_price', e.target.value)}
                      placeholder="0.00"
                    />
                  </div>
                  <div className="flex items-end">
                    <Button 
                      type="button" 
                      onClick={() => removeItem(index)} 
                      variant="outline" 
                      size="icon"
                      className="text-red-500 hover:text-red-700"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Order Summary */}
          <Card className="border-amber-200 bg-gradient-to-r from-amber-50 to-orange-50">
            <CardContent className="p-4">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div>
                  <p className="text-sm text-amber-700 font-medium">Subtotal</p>
                  <p className="text-xl font-bold text-gray-900">â‚¹{subtotal.toFixed(2)}</p>
                </div>
                <div>
                  <p className="text-sm text-amber-700 font-medium">Discount</p>
                  <p className="text-xl font-bold text-gray-900">â‚¹{discount.toFixed(2)}</p>
                </div>
                <div>
                  <p className="text-sm text-amber-700 font-medium">Tax (18%)</p>
                  <p className="text-xl font-bold text-gray-900">â‚¹{tax.toFixed(2)}</p>
                </div>
                <div>
                  <p className="text-sm text-amber-700 font-medium">Total</p>
                  <p className="text-2xl font-bold text-gray-900">â‚¹{total.toFixed(2)}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <DialogFooter className="gap-2">
            <Button type="button" variant="outline" onClick={onCancel}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              className="bg-gradient-to-r from-amber-500 to-orange-500 text-white"
              disabled={orderItems.length === 0 || !formData.customer_id}
            >
              Create Order
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

file OrderForm Ended

file OrderList Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { format } from 'date-fns';
import { Eye, MoreHorizontal, CheckCircle, Clock, Truck, Package } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const statusConfig = {
  pending: { color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: Clock },
  confirmed: { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: CheckCircle },
  in_production: { color: 'bg-purple-100 text-purple-800 border-purple-200', icon: Package },
  ready: { color: 'bg-green-100 text-green-800 border-green-200', icon: CheckCircle },
  dispatched: { color: 'bg-orange-100 text-orange-800 border-orange-200', icon: Truck },
  delivered: { color: 'bg-emerald-100 text-emerald-800 border-emerald-200', icon: CheckCircle },
  cancelled: { color: 'bg-red-100 text-red-800 border-red-200', icon: Clock }
};

const paymentStatusConfig = {
  pending: { color: 'bg-yellow-100 text-yellow-800' },
  partial: { color: 'bg-orange-100 text-orange-800' },
  paid: { color: 'bg-green-100 text-green-800' },
  overdue: { color: 'bg-red-100 text-red-800' }
};

export default function OrderList({ orders, customers, loading, onRefresh }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Customer Orders</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                {Array(8).fill(0).map((_, i) => (
                  <TableHead key={i}><Skeleton className="h-4 w-20" /></TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  {Array(8).fill(0).map((_, j) => (
                    <TableCell key={j}><Skeleton className="h-4 w-full" /></TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  }

  const getCustomerName = (customerId) => {
    const customer = customers.find(c => c.id === customerId);
    return customer?.name || 'Unknown Customer';
  };

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-bold text-gray-900">Customer Orders</CardTitle>
          <Button variant="outline" size="sm" onClick={onRefresh}>
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-amber-50">
              <TableHead>Order #</TableHead>
              <TableHead>Customer</TableHead>
              <TableHead>Order Date</TableHead>
              <TableHead>Delivery Date</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Payment</TableHead>
              <TableHead className="text-right">Amount</TableHead>
              <TableHead className="w-12"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {orders.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  No orders found. Create your first order to get started.
                </TableCell>
              </TableRow>
            ) : (
              orders.map(order => {
                const statusInfo = statusConfig[order.status] || statusConfig.pending;
                const paymentInfo = paymentStatusConfig[order.payment_status] || paymentStatusConfig.pending;
                const StatusIcon = statusInfo.icon;
                
                return (
                  <TableRow key={order.id} className="hover:bg-amber-50 transition-colors">
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 rounded-full bg-amber-400"></div>
                        {order.order_number}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div>
                        <p className="font-medium">{getCustomerName(order.customer_id)}</p>
                        <p className="text-sm text-gray-500">
                          {customers.find(c => c.id === order.customer_id)?.customer_type || ''}
                        </p>
                      </div>
                    </TableCell>
                    <TableCell>{format(new Date(order.order_date), 'MMM d, yyyy')}</TableCell>
                    <TableCell>
                      {order.expected_delivery 
                        ? format(new Date(order.expected_delivery), 'MMM d, yyyy')
                        : 'Not set'
                      }
                    </TableCell>
                    <TableCell>
                      <Badge className={`${statusInfo.color} border flex items-center gap-1 w-fit`}>
                        <StatusIcon className="w-3 h-3" />
                        {order.status.replace('_', ' ')}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className={`${paymentInfo.color} border`}>
                        {order.payment_status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right font-medium">
                      â‚¹{order.net_amount?.toLocaleString('en-IN') || '0'}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            <Eye className="w-4 h-4 mr-2" />
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Edit Order
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Update Status
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Print Invoice
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}





file OrderList Ended


file OrderSummary Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { ShoppingCart, Clock, CheckCircle, Truck, AlertTriangle } from 'lucide-react';

export default function OrderSummary({ orders, customers, loading }) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {Array(4).fill(0).map((_, i) => (
          <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
            <CardContent className="p-6">
              <Skeleton className="h-20 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  const statusCounts = orders.reduce((acc, order) => {
    acc[order.status] = (acc[order.status] || 0) + 1;
    return acc;
  }, {});

  const paymentCounts = orders.reduce((acc, order) => {
    acc[order.payment_status] = (acc[order.payment_status] || 0) + 1;
    return acc;
  }, {});

  const totalRevenue = orders.reduce((sum, order) => sum + (order.net_amount || 0), 0);
  const pendingPayments = orders
    .filter(order => order.payment_status === 'pending' || order.payment_status === 'partial')
    .reduce((sum, order) => sum + (order.net_amount || 0), 0);

  return (
    <div className="space-y-6">
      {/* Order Status Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Total Orders</p>
                <p className="text-3xl font-bold text-gray-900">{orders.length}</p>
              </div>
              <ShoppingCart className="w-8 h-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Pending Orders</p>
                <p className="text-3xl font-bold text-gray-900">{statusCounts.pending || 0}</p>
              </div>
              <Clock className="w-8 h-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Ready to Ship</p>
                <p className="text-3xl font-bold text-gray-900">{statusCounts.ready || 0}</p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Delivered</p>
                <p className="text-3xl font-bold text-gray-900">{statusCounts.delivered || 0}</p>
              </div>
              <Truck className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Financial Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle className="text-lg">Revenue Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Total Revenue</span>
                <span className="text-2xl font-bold text-green-600">
                  â‚¹{totalRevenue.toLocaleString('en-IN')}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Pending Payments</span>
                <span className="text-xl font-semibold text-orange-600">
                  â‚¹{pendingPayments.toLocaleString('en-IN')}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Average Order Value</span>
                <span className="text-lg font-medium text-gray-900">
                  â‚¹{orders.length > 0 ? (totalRevenue / orders.length).toFixed(0) : '0'}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle className="text-lg">Payment Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-green-500"></div>
                  <span className="text-gray-600">Paid</span>
                </div>
                <span className="font-semibold">{paymentCounts.paid || 0}</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                  <span className="text-gray-600">Pending</span>
                </div>
                <span className="font-semibold">{paymentCounts.pending || 0}</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-orange-500"></div>
                  <span className="text-gray-600">Partial</span>
                </div>
                <span className="font-semibold">{paymentCounts.partial || 0}</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-red-500"></div>
                  <span className="text-gray-600">Overdue</span>
                </div>
                <span className="font-semibold">{paymentCounts.overdue || 0}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


file OrderSummary Ended


file OrderMetrics Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

const COLORS = ['#f59e0b', '#10b981', '#3b82f6', '#ef4444', '#8b5cf6'];

export default function OrderMetrics({ orders, customers, loading }) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {Array(4).fill(0).map((_, i) => (
          <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
            <CardHeader>
              <Skeleton className="h-6 w-32" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-64 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  // Monthly order trends
  const monthlyData = orders.reduce((acc, order) => {
    const month = new Date(order.order_date).toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
    const existing = acc.find(item => item.month === month);
    if (existing) {
      existing.orders += 1;
      existing.revenue += order.net_amount || 0;
    } else {
      acc.push({
        month,
        orders: 1,
        revenue: order.net_amount || 0
      });
    }
    return acc;
  }, []).slice(-6);

  // Customer type distribution
  const customerTypeData = customers.reduce((acc, customer) => {
    const customerOrders = orders.filter(order => order.customer_id === customer.id);
    if (customerOrders.length > 0) {
      const existing = acc.find(item => item.type === customer.customer_type);
      if (existing) {
        existing.orders += customerOrders.length;
        existing.revenue += customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0);
      } else {
        acc.push({
          type: customer.customer_type,
          orders: customerOrders.length,
          revenue: customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0)
        });
      }
    }
    return acc;
  }, []);

  // Order status distribution
  const statusData = Object.entries(
    orders.reduce((acc, order) => {
      acc[order.status] = (acc[order.status] || 0) + 1;
      return acc;
    }, {})
  ).map(([status, count]) => ({
    name: status.replace('_', ' '),
    value: count
  }));

  return (
    <div className="space-y-6">
      {/* Monthly Trends */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Monthly Order Trends</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={monthlyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="orders" fill="#f59e0b" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Order Status Distribution</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={statusData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {statusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Customer Analysis */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Revenue by Customer Type</CardTitle>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={customerTypeData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="type" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="revenue" fill="#10b981" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Top Customers */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Top Customers by Revenue</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {customers
              .map(customer => ({
                ...customer,
                totalRevenue: orders
                  .filter(order => order.customer_id === customer.id)
                  .reduce((sum, order) => sum + (order.net_amount || 0), 0),
                orderCount: orders.filter(order => order.customer_id === customer.id).length
              }))
              .filter(customer => customer.totalRevenue > 0)
              .sort((a, b) => b.totalRevenue - a.totalRevenue)
              .slice(0, 5)
              .map(customer => (
                <div key={customer.id} className="flex items-center justify-between p-3 bg-amber-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{customer.name}</p>
                    <p className="text-sm text-gray-600">{customer.customer_type} â€¢ {customer.orderCount} orders</p>
                  </div>
                  <p className="text-lg font-bold text-gray-900">
                    â‚¹{customer.totalRevenue.toLocaleString('en-IN')}
                  </p>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

file OrderMetrics Ended

directory orders ended

Under directory customers


file CustomerForm Start

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function CustomerForm({ onSave, onCancel }) {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    customer_type: 'retail',
    tier: 'standard',
    address: '',
    city: '',
    state: '',
    pincode: '',
    gst_number: '',
    credit_limit: 0,
    payment_terms: 'immediate',
    notes: ''
  });

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({
      ...formData,
      credit_limit: parseFloat(formData.credit_limit) || 0
    });
  };

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-3xl max-h-[90vh] overflow-y-auto bg-white/95 backdrop-blur-sm border-amber-200">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">Add New Customer</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Basic Information</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="name">Customer Name *</Label>
                <Input 
                  id="name" 
                  value={formData.name} 
                  onChange={(e) => handleChange('name', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input 
                  id="phone" 
                  value={formData.phone} 
                  onChange={(e) => handleChange('phone', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email Address</Label>
                <Input 
                  id="email" 
                  type="email"
                  value={formData.email} 
                  onChange={(e) => handleChange('email', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="customer_type">Customer Type</Label>
                <Select value={formData.customer_type} onValueChange={(value) => handleChange('customer_type', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="retail">Retail</SelectItem>
                    <SelectItem value="d2c">Direct to Consumer</SelectItem>
                    <SelectItem value="restaurant">Restaurant</SelectItem>
                    <SelectItem value="distributor">Distributor</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="tier">Customer Tier</Label>
                <Select value={formData.tier} onValueChange={(value) => handleChange('tier', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="premium">Premium</SelectItem>
                    <SelectItem value="standard">Standard</SelectItem>
                    <SelectItem value="wholesale">Wholesale</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Address Information */}
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Address Information</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="address">Address</Label>
                <Textarea 
                  id="address" 
                  value={formData.address} 
                  onChange={(e) => handleChange('address', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="city">City</Label>
                <Input 
                  id="city" 
                  value={formData.city} 
                  onChange={(e) => handleChange('city', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="state">State</Label>
                <Input 
                  id="state" 
                  value={formData.state} 
                  onChange={(e) => handleChange('state', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="pincode">Pincode</Label>
                <Input 
                  id="pincode" 
                  value={formData.pincode} 
                  onChange={(e) => handleChange('pincode', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="gst_number">GST Number</Label>
                <Input 
                  id="gst_number" 
                  value={formData.gst_number} 
                  onChange={(e) => handleChange('gst_number', e.target.value)} 
                />
              </div>
            </CardContent>
          </Card>

          {/* Business Terms */}
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Business Terms</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="credit_limit">Credit Limit (â‚¹)</Label>
                <Input 
                  id="credit_limit" 
                  type="number"
                  value={formData.credit_limit} 
                  onChange={(e) => handleChange('credit_limit', e.target.value)} 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="payment_terms">Payment Terms</Label>
                <Select value={formData.payment_terms} onValueChange={(value) => handleChange('payment_terms', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="immediate">Immediate</SelectItem>
                    <SelectItem value="15_days">15 Days</SelectItem>
                    <SelectItem value="30_days">30 Days</SelectItem>
                    <SelectItem value="45_days">45 Days</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="notes">Notes</Label>
                <Textarea 
                  id="notes" 
                  value={formData.notes} 
                  onChange={(e) => handleChange('notes', e.target.value)} 
                  placeholder="Additional notes about the customer..."
                />
              </div>
            </CardContent>
          </Card>

          <DialogFooter className="gap-2">
            <Button type="button" variant="outline" onClick={onCancel}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              className="bg-gradient-to-r from-amber-500 to-orange-500 text-white"
            >
              Add Customer
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

file CustomerForm Ended

file CustomerList Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { format } from 'date-fns';
import { Eye, MoreHorizontal, Phone, Mail, MapPin } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const customerTypeColors = {
  retail: 'bg-blue-100 text-blue-800 border-blue-200',
  d2c: 'bg-green-100 text-green-800 border-green-200',
  restaurant: 'bg-purple-100 text-purple-800 border-purple-200',
  distributor: 'bg-orange-100 text-orange-800 border-orange-200'
};

const tierColors = {
  premium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  standard: 'bg-gray-100 text-gray-800 border-gray-200',
  wholesale: 'bg-indigo-100 text-indigo-800 border-indigo-200'
};

export default function CustomerList({ customers, orders, loading, onRefresh }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Customers</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                {Array(7).fill(0).map((_, i) => (
                  <TableHead key={i}><Skeleton className="h-4 w-20" /></TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  {Array(7).fill(0).map((_, j) => (
                    <TableCell key={j}><Skeleton className="h-4 w-full" /></TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  }

  const getCustomerStats = (customerId) => {
    const customerOrders = orders.filter(order => order.customer_id === customerId);
    const totalRevenue = customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0);
    const lastOrderDate = customerOrders.length > 0 
      ? Math.max(...customerOrders.map(order => new Date(order.order_date).getTime()))
      : null;
    
    return {
      orderCount: customerOrders.length,
      totalRevenue,
      lastOrderDate: lastOrderDate ? new Date(lastOrderDate) : null
    };
  };

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-bold text-gray-900">Customer Directory</CardTitle>
          <Button variant="outline" size="sm" onClick={onRefresh}>
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-amber-50">
              <TableHead>Customer</TableHead>
              <TableHead>Type</TableHead>
              <TableHead>Tier</TableHead>
              <TableHead>Contact</TableHead>
              <TableHead>Location</TableHead>
              <TableHead>Orders</TableHead>
              <TableHead>Total Revenue</TableHead>
              <TableHead className="w-12"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {customers.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  No customers found. Add your first customer to get started.
                </TableCell>
              </TableRow>
            ) : (
              customers.map(customer => {
                const stats = getCustomerStats(customer.id);
                
                return (
                  <TableRow key={customer.id} className="hover:bg-amber-50 transition-colors">
                    <TableCell>
                      <div className="space-y-1">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full bg-amber-400"></div>
                          <span className="font-medium">{customer.name}</span>
                        </div>
                        {stats.lastOrderDate && (
                          <p className="text-xs text-gray-500">
                            Last order: {format(stats.lastOrderDate, 'MMM d, yyyy')}
                          </p>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge className={`${customerTypeColors[customer.customer_type]} border`}>
                        {customer.customer_type}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className={`${tierColors[customer.tier]} border`}>
                        {customer.tier}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        {customer.phone && (
                          <div className="flex items-center gap-1 text-sm">
                            <Phone className="w-3 h-3 text-gray-400" />
                            <span>{customer.phone}</span>
                          </div>
                        )}
                        {customer.email && (
                          <div className="flex items-center gap-1 text-sm">
                            <Mail className="w-3 h-3 text-gray-400" />
                            <span className="truncate max-w-32">{customer.email}</span>
                          </div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1 text-sm">
                        <MapPin className="w-3 h-3 text-gray-400" />
                        <span>{customer.city || 'Not specified'}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="font-medium">{stats.orderCount}</span>
                    </TableCell>
                    <TableCell>
                      <span className="font-medium text-green-600">
                        â‚¹{stats.totalRevenue.toLocaleString('en-IN')}
                      </span>
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            <Eye className="w-4 h-4 mr-2" />
                            View Profile
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Edit Customer
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            View Orders
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Contact Customer
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}

file CustomerList Ended

file CustomerMetrics Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Users, TrendingUp, CreditCard, Star } from 'lucide-react';

const COLORS = ['#f59e0b', '#10b981', '#3b82f6', '#ef4444'];

export default function CustomerMetrics({ customers, orders, loading }) {
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {Array(4).fill(0).map((_, i) => (
            <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-6">
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  // Calculate customer metrics
  const totalCustomers = customers.length;
  const activeCustomers = customers.filter(customer => 
    orders.some(order => order.customer_id === customer.id)
  ).length;

  const customerLifetimeValues = customers.map(customer => {
    const customerOrders = orders.filter(order => order.customer_id === customer.id);
    return {
      ...customer,
      orderCount: customerOrders.length,
      totalRevenue: customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0),
      avgOrderValue: customerOrders.length > 0 
        ? customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0) / customerOrders.length 
        : 0
    };
  });

  const avgCustomerValue = customerLifetimeValues.length > 0
    ? customerLifetimeValues.reduce((sum, customer) => sum + customer.totalRevenue, 0) / customerLifetimeValues.length
    : 0;

  const topCustomers = customerLifetimeValues
    .filter(customer => customer.totalRevenue > 0)
    .sort((a, b) => b.totalRevenue - a.totalRevenue)
    .slice(0, 10);

  // Customer type distribution
  const typeDistribution = customers.reduce((acc, customer) => {
    acc[customer.customer_type] = (acc[customer.customer_type] || 0) + 1;
    return acc;
  }, {});

  const typeData = Object.entries(typeDistribution).map(([type, count]) => ({
    name: type,
    value: count
  }));

  // Customer tier analysis
  const tierData = customers.reduce((acc, customer) => {
    const customerOrders = orders.filter(order => order.customer_id === customer.id);
    const revenue = customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0);
    
    const existing = acc.find(item => item.tier === customer.tier);
    if (existing) {
      existing.customers += 1;
      existing.revenue += revenue;
    } else {
      acc.push({
        tier: customer.tier,
        customers: 1,
        revenue: revenue
      });
    }
    return acc;
  }, []);

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Total Customers</p>
                <p className="text-3xl font-bold text-gray-900">{totalCustomers}</p>
              </div>
              <Users className="w-8 h-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Active Customers</p>
                <p className="text-3xl font-bold text-gray-900">{activeCustomers}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Avg Customer Value</p>
                <p className="text-2xl font-bold text-gray-900">â‚¹{avgCustomerValue.toFixed(0)}</p>
              </div>
              <CreditCard className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Retention Rate</p>
                <p className="text-3xl font-bold text-gray-900">
                  {totalCustomers > 0 ? ((activeCustomers / totalCustomers) * 100).toFixed(0) : 0}%
                </p>
              </div>
              <Star className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Customer Type Distribution</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={typeData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {typeData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Revenue by Customer Tier</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={tierData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="tier" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="revenue" fill="#f59e0b" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Top Customers */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Top Customers by Revenue</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {topCustomers.slice(0, 8).map((customer, index) => (
              <div key={customer.id} className="flex items-center justify-between p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg">
                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center text-white font-bold">
                    {index + 1}
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">{customer.name}</p>
                    <p className="text-sm text-gray-600">
                      {customer.customer_type} â€¢ {customer.orderCount} orders â€¢ Avg: â‚¹{customer.avgOrderValue.toFixed(0)}
                    </p>
                  </div>
                </div>
                <p className="text-lg font-bold text-gray-900">
                  â‚¹{customer.totalRevenue.toLocaleString('en-IN')}
                </p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

file CustomerMetrics Ended

file CustomerSegments Start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { Users, TrendingUp, DollarSign, Star } from 'lucide-react';

export default function CustomerSegments({ customers, orders, loading }) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {Array(4).fill(0).map((_, i) => (
          <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
            <CardHeader>
              <Skeleton className="h-6 w-32" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-32 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  // Segment customers by revenue
  const customerAnalysis = customers.map(customer => {
    const customerOrders = orders.filter(order => order.customer_id === customer.id);
    const totalRevenue = customerOrders.reduce((sum, order) => sum + (order.net_amount || 0), 0);
    const orderCount = customerOrders.length;
    const avgOrderValue = orderCount > 0 ? totalRevenue / orderCount : 0;
    
    // Determine segment
    let segment = 'New';
    if (totalRevenue > 50000) segment = 'VIP';
    else if (totalRevenue > 20000) segment = 'High Value';
    else if (totalRevenue > 5000) segment = 'Regular';
    else if (orderCount > 0) segment = 'Active';
    
    return {
      ...customer,
      totalRevenue,
      orderCount,
      avgOrderValue,
      segment
    };
  });

  // Group by segments
  const segments = {
    VIP: customerAnalysis.filter(c => c.segment === 'VIP'),
    'High Value': customerAnalysis.filter(c => c.segment === 'High Value'),
    Regular: customerAnalysis.filter(c => c.segment === 'Regular'),
    Active: customerAnalysis.filter(c => c.segment === 'Active'),
    New: customerAnalysis.filter(c => c.segment === 'New')
  };

  const segmentColors = {
    VIP: 'bg-purple-100 text-purple-800 border-purple-200',
    'High Value': 'bg-blue-100 text-blue-800 border-blue-200',
    Regular: 'bg-green-100 text-green-800 border-green-200',
    Active: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    New: 'bg-gray-100 text-gray-800 border-gray-200'
  };

  const segmentIcons = {
    VIP: Star,
    'High Value': DollarSign,
    Regular: TrendingUp,
    Active: Users,
    New: Users
  };

  return (
    <div className="space-y-6">
      {/* Segment Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {Object.entries(segments).map(([segmentName, customers]) => {
          const Icon = segmentIcons[segmentName];
          const totalRevenue = customers.reduce((sum, c) => sum + c.totalRevenue, 0);
          
          return (
            <Card key={segmentName} className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-4 text-center">
                <div className="flex items-center justify-center mb-2">
                  <Icon className="w-6 h-6 text-amber-600" />
                </div>
                <Badge className={`${segmentColors[segmentName]} border mb-2`}>
                  {segmentName}
                </Badge>
                <p className="text-2xl font-bold text-gray-900">{customers.length}</p>
                <p className="text-sm text-gray-600">customers</p>
                <p className="text-sm font-medium text-green-600 mt-1">
                  â‚¹{totalRevenue.toLocaleString('en-IN')}
                </p>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Detailed Segments */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {Object.entries(segments)
          .filter(([_, customers]) => customers.length > 0)
          .map(([segmentName, customers]) => (
            <Card key={segmentName} className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    {React.createElement(segmentIcons[segmentName], { className: "w-5 h-5" })}
                    {segmentName} Customers
                  </CardTitle>
                  <Badge className={`${segmentColors[segmentName]} border`}>
                    {customers.length}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 max-h-64 overflow-y-auto">
                  {customers.slice(0, 10).map(customer => (
                    <div key={customer.id} className="flex items-center justify-between p-3 bg-amber-50 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{customer.name}</p>
                        <p className="text-sm text-gray-600">
                          {customer.customer_type} â€¢ {customer.orderCount} orders
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold text-gray-900">
                          â‚¹{customer.totalRevenue.toLocaleString('en-IN')}
                        </p>
                        <p className="text-xs text-gray-500">
                          Avg: â‚¹{customer.avgOrderValue.toFixed(0)}
                        </p>
                      </div>
                    </div>
                  ))}
                  {customers.length > 10 && (
                    <div className="text-center text-sm text-gray-500 pt-2">
                      +{customers.length - 10} more customers
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
      </div>

      {/* Segment Insights */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Segment Insights & Recommendations</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="p-4 bg-gradient-to-r from-purple-50 to-violet-50 rounded-lg border border-purple-200">
              <h4 className="font-semibold text-purple-800 mb-2">VIP Customers</h4>
              <p className="text-sm text-purple-700">
                Your highest value customers. Focus on retention with exclusive offers and premium service.
              </p>
            </div>
            
            <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
              <h4 className="font-semibold text-blue-800 mb-2">High Value Growth</h4>
              <p className="text-sm text-blue-700">
                Target these customers for upselling to reach VIP status with larger order incentives.
              </p>
            </div>
            
            <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200">
              <h4 className="font-semibold text-green-800 mb-2">Regular Engagement</h4>
              <p className="text-sm text-green-700">
                Keep regular customers engaged with consistent quality and loyalty programs.
              </p>
            </div>
            
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-lg border border-yellow-200">
              <h4 className="font-semibold text-yellow-800 mb-2">Active Nurturing</h4>
              <p className="text-sm text-yellow-700">
                Recent customers who need nurturing to become regular buyers through follow-ups.
              </p>
            </div>
            
            <div className="p-4 bg-gradient-to-r from-gray-50 to-slate-50 rounded-lg border border-gray-200">
              <h4 className="font-semibold text-gray-800 mb-2">New Customer Focus</h4>
              <p className="text-sm text-gray-700">
                First-time buyers need excellent onboarding experience to convert to active customers.
              </p>
            </div>
            
            <div className="p-4 bg-gradient-to-r from-orange-50 to-red-50 rounded-lg border border-orange-200">
              <h4 className="font-semibold text-orange-800 mb-2">Win-Back Campaign</h4>
              <p className="text-sm text-orange-700">
                Identify inactive customers and create targeted campaigns to re-engage them.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

file CustomerSegments Ended

Directory customers ended

under finance directory

file TransactionForm start

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { format } from 'date-fns';

export default function TransactionForm({ customers, suppliers, orders, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    transaction_date: format(new Date(), 'yyyy-MM-dd'),
    type: 'payment',
    reference_id: '',
    amount: '',
    description: '',
    payment_method: 'cash',
    category: 'sales',
    customer_id: '',
    supplier_id: ''
  });

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({
      ...formData,
      amount: parseFloat(formData.amount)
    });
  };

  const categoryOptions = {
    payment: ['sales'],
    expense: ['raw_materials', 'packaging', 'transport', 'utilities', 'salary', 'other'],
    credit_note: ['sales'],
    invoice: ['sales']
  };

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-2xl bg-white/95 backdrop-blur-sm border-amber-200">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">Add Transaction</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <Card className="border-amber-200">
            <CardHeader>
              <CardTitle className="text-lg">Transaction Details</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="transaction_date">Transaction Date</Label>
                <Input 
                  id="transaction_date" 
                  type="date"
                  value={formData.transaction_date} 
                  onChange={(e) => handleChange('transaction_date', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="type">Transaction Type</Label>
                <Select value={formData.type} onValueChange={(value) => handleChange('type', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="payment">Payment Received</SelectItem>
                    <SelectItem value="expense">Expense</SelectItem>
                    <SelectItem value="credit_note">Credit Note</SelectItem>
                    <SelectItem value="invoice">Invoice</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="amount">Amount (â‚¹)</Label>
                <Input 
                  id="amount" 
                  type="number"
                  step="0.01"
                  value={formData.amount} 
                  onChange={(e) => handleChange('amount', e.target.value)} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="payment_method">Payment Method</Label>
                <Select value={formData.payment_method} onValueChange={(value) => handleChange('payment_method', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cash">Cash</SelectItem>
                    <SelectItem value="bank_transfer">Bank Transfer</SelectItem>
                    <SelectItem value="upi">UPI</SelectItem>
                    <SelectItem value="cheque">Cheque</SelectItem>
                    <SelectItem value="credit_card">Credit Card</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="category">Category</Label>
                <Select value={formData.category} onValueChange={(value) => handleChange('category', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {categoryOptions[formData.type]?.map(category => (
                      <SelectItem key={category} value={category}>
                        {category.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="reference_id">Reference ID</Label>
                <Input 
                  id="reference_id" 
                  value={formData.reference_id} 
                  onChange={(e) => handleChange('reference_id', e.target.value)} 
                  placeholder="Order number, invoice number, etc."
                />
              </div>
              
              {(formData.type === 'payment' || formData.type === 'credit_note') && (
                <div className="space-y-2">
                  <Label htmlFor="customer_id">Customer</Label>
                  <Select value={formData.customer_id} onValueChange={(value) => handleChange('customer_id', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select customer" />
                    </SelectTrigger>
                    <SelectContent>
                      {customers.map(customer => (
                        <SelectItem key={customer.id} value={customer.id}>
                          {customer.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              {formData.type === 'expense' && (
                <div className="space-y-2">
                  <Label htmlFor="supplier_id">Supplier</Label>
                  <Select value={formData.supplier_id} onValueChange={(value) => handleChange('supplier_id', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select supplier" />
                    </SelectTrigger>
                    <SelectContent>
                      {suppliers.map(supplier => (
                        <SelectItem key={supplier.id} value={supplier.id}>
                          {supplier.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="description">Description</Label>
                <Textarea 
                  id="description" 
                  value={formData.description} 
                  onChange={(e) => handleChange('description', e.target.value)} 
                  placeholder="Transaction description..."
                  required
                />
              </div>
            </CardContent>
          </Card>

          <DialogFooter className="gap-2">
            <Button type="button" variant="outline" onClick={onCancel}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              className="bg-gradient-to-r from-amber-500 to-orange-500 text-white"
            >
              Add Transaction
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}


file TransactionForm Ended

file TransactionList start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { format } from 'date-fns';
import { ArrowUpCircle, ArrowDownCircle, MoreHorizontal } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const typeConfig = {
  payment: { color: 'bg-green-100 text-green-800 border-green-200', icon: ArrowUpCircle },
  expense: { color: 'bg-red-100 text-red-800 border-red-200', icon: ArrowDownCircle },
  credit_note: { color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: ArrowUpCircle },
  invoice: { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: ArrowUpCircle }
};

export default function TransactionList({ transactions, customers, suppliers, loading, onRefresh }) {
  if (loading) {
    return (
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Financial Transactions</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                {Array(7).fill(0).map((_, i) => (
                  <TableHead key={i}><Skeleton className="h-4 w-20" /></TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array(5).fill(0).map((_, i) => (
                <TableRow key={i}>
                  {Array(7).fill(0).map((_, j) => (
                    <TableCell key={j}><Skeleton className="h-4 w-full" /></TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    );
  }

  const getEntityName = (transaction) => {
    if (transaction.customer_id) {
      const customer = customers.find(c => c.id === transaction.customer_id);
      return customer?.name || 'Unknown Customer';
    }
    if (transaction.supplier_id) {
      const supplier = suppliers.find(s => s.id === transaction.supplier_id);
      return supplier?.name || 'Unknown Supplier';
    }
    return 'N/A';
  };

  return (
    <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-bold text-gray-900">Financial Transactions</CardTitle>
          <Button variant="outline" size="sm" onClick={onRefresh}>
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-amber-50">
              <TableHead>Date</TableHead>
              <TableHead>Type</TableHead>
              <TableHead>Description</TableHead>
              <TableHead>Entity</TableHead>
              <TableHead>Method</TableHead>
              <TableHead className="text-right">Amount</TableHead>
              <TableHead className="w-12"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {transactions.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-8 text-gray-500">
                  No transactions found. Add your first transaction to get started.
                </TableCell>
              </TableRow>
            ) : (
              transactions.map(transaction => {
                const typeInfo = typeConfig[transaction.type] || typeConfig.payment;
                const TypeIcon = typeInfo.icon;
                const isIncome = transaction.type === 'payment' || transaction.type === 'invoice';
                
                return (
                  <TableRow key={transaction.id} className="hover:bg-amber-50 transition-colors">
                    <TableCell>{format(new Date(transaction.transaction_date), 'MMM d, yyyy')}</TableCell>
                    <TableCell>
                      <Badge className={`${typeInfo.color} border flex items-center gap-1 w-fit`}>
                        <TypeIcon className="w-3 h-3" />
                        {transaction.type.replace('_', ' ')}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div>
                        <p className="font-medium">{transaction.description}</p>
                        {transaction.reference_id && (
                          <p className="text-sm text-gray-500">Ref: {transaction.reference_id}</p>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{getEntityName(transaction)}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className="border-amber-300">
                        {transaction.payment_method?.replace('_', ' ')}
                      </Badge>
                    </TableCell>
                    <TableCell className={`text-right font-medium ${
                      isIncome ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {isIncome ? '+' : '-'}â‚¹{transaction.amount?.toLocaleString('en-IN') || '0'}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Edit Transaction
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            Print Receipt
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}

file TransactionList Ended

file FinanceMetrics start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';
import { IndianRupee, TrendingUp, TrendingDown, DollarSign } from 'lucide-react';

export default function FinanceMetrics({ transactions, loading }) {
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {Array(4).fill(0).map((_, i) => (
            <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardContent className="p-6">
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  // Calculate financial metrics
  const totalIncome = transactions
    .filter(t => t.type === 'payment' || t.type === 'invoice')
    .reduce((sum, t) => sum + (t.amount || 0), 0);

  const totalExpenses = transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + (t.amount || 0), 0);

  const netProfit = totalIncome - totalExpenses;

  // Monthly cash flow
  const monthlyData = transactions.reduce((acc, transaction) => {
    const month = new Date(transaction.transaction_date).toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
    const existing = acc.find(item => item.month === month);
    const isIncome = transaction.type === 'payment' || transaction.type === 'invoice';
    
    if (existing) {
      if (isIncome) {
        existing.income += transaction.amount || 0;
      } else {
        existing.expenses += transaction.amount || 0;
      }
      existing.netFlow = existing.income - existing.expenses;
    } else {
      acc.push({
        month,
        income: isIncome ? (transaction.amount || 0) : 0,
        expenses: !isIncome ? (transaction.amount || 0) : 0,
        netFlow: isIncome ? (transaction.amount || 0) : -(transaction.amount || 0)
      });
    }
    return acc;
  }, []).slice(-6);

  // Expense categories
  const expenseCategories = transactions
    .filter(t => t.type === 'expense')
    .reduce((acc, transaction) => {
      const category = transaction.category || 'other';
      acc[category] = (acc[category] || 0) + (transaction.amount || 0);
      return acc;
    }, {});

  const expenseData = Object.entries(expenseCategories).map(([category, amount]) => ({
    category: category.replace('_', ' '),
    amount
  }));

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Total Income</p>
                <p className="text-2xl font-bold text-green-600">â‚¹{totalIncome.toLocaleString('en-IN')}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Total Expenses</p>
                <p className="text-2xl font-bold text-red-600">â‚¹{totalExpenses.toLocaleString('en-IN')}</p>
              </div>
              <TrendingDown className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Net Profit</p>
                <p className={`text-2xl font-bold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  â‚¹{netProfit.toLocaleString('en-IN')}
                </p>
              </div>
              <DollarSign className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Profit Margin</p>
                <p className={`text-2xl font-bold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {totalIncome > 0 ? ((netProfit / totalIncome) * 100).toFixed(1) : 0}%
                </p>
              </div>
              <IndianRupee className="w-8 h-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Monthly Cash Flow</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={monthlyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="income" stroke="#10b981" strokeWidth={2} name="Income" />
                <Line type="monotone" dataKey="expenses" stroke="#ef4444" strokeWidth={2} name="Expenses" />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Expenses by Category</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={expenseData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="category" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="amount" fill="#f59e0b" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Expense Breakdown */}
      <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
        <CardHeader>
          <CardTitle>Expense Breakdown</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {expenseData.map((expense, index) => (
              <div key={index} className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200">
                <div className="flex justify-between items-center">
                  <p className="font-medium text-gray-900 capitalize">{expense.category}</p>
                  <p className="text-lg font-bold text-gray-900">
                    â‚¹{expense.amount.toLocaleString('en-IN')}
                  </p>
                </div>
                <div className="mt-2">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-gradient-to-r from-amber-400 to-orange-500 h-2 rounded-full"
                      style={{ width: `${(expense.amount / totalExpenses) * 100}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">
                    {((expense.amount / totalExpenses) * 100).toFixed(1)}% of total expenses
                  </p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

file FinanceMetrics Ended

file CashFlow start

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { TrendingUp, TrendingDown, Activity, Calculator } from 'lucide-react';

export default function CashFlow({ transactions, loading }) {
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {Array(4).fill(0).map((_, i) => (
            <Card key={i} className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <Skeleton className="h-6 w-32" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-64 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  // Calculate daily cash flow
  const dailyFlow = transactions.reduce((acc, transaction) => {
    const date = new Date(transaction.transaction_date).toLocaleDateString('en-GB');
    const existing = acc.find(item => item.date === date);
    const isIncome = transaction.type === 'payment' || transaction.type === 'invoice';
    const amount = transaction.amount || 0;
    
    if (existing) {
      if (isIncome) {
        existing.income += amount;
      } else {
        existing.expenses += amount;
      }
      existing.netFlow = existing.income - existing.expenses;
    } else {
      acc.push({
        date,
        income: isIncome ? amount : 0,
        expenses: !isIncome ? amount : 0,
        netFlow: isIncome ? amount : -amount
      });
    }
    return acc;
  }, [])
  .sort((a, b) => new Date(a.date.split('/').reverse().join('-')) - new Date(b.date.split('/').reverse().join('-')))
  .slice(-30); // Last 30 days

  // Calculate cumulative balance
  let runningBalance = 0;
  const balanceData = dailyFlow.map(day => {
    runningBalance += day.netFlow;
    return {
      ...day,
      balance: runningBalance
    };
  });

  // Weekly aggregation
  const weeklyData = [];
  for (let i = 0; i < balanceData.length; i += 7) {
    const week = balanceData.slice(i, i + 7);
    const weekIncome = week.reduce((sum, day) => sum + day.income, 0);
    const weekExpenses = week.reduce((sum, day) => sum + day.expenses, 0);
    
    weeklyData.push({
      week: `Week ${Math.floor(i / 7) + 1}`,
      income: weekIncome,
      expenses: weekExpenses,
      netFlow: weekIncome - weekExpenses
    });
  }

  // Calculate metrics
  const totalDays = balanceData.length;
  const avgDailyIncome = totalDays > 0 
    ? balanceData.reduce((sum, day) => sum + day.income, 0) / totalDays 
    : 0;
  const avgDailyExpenses = totalDays > 0
    ? balanceData.reduce((sum, day) => sum + day.expenses, 0) / totalDays
    : 0;
  const currentBalance = runningBalance;

  return (
    <div className="space-y-6">
      {/* Cash Flow Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Current Balance</p>
                <p className={`text-2xl font-bold ${currentBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  â‚¹{currentBalance.toLocaleString('en-IN')}
                </p>
              </div>
              <Activity className="w-8 h-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Avg Daily Income</p>
                <p className="text-2xl font-bold text-green-600">â‚¹{avgDailyIncome.toFixed(0)}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Avg Daily Expenses</p>
                <p className="text-2xl font-bold text-red-600">â‚¹{avgDailyExpenses.toFixed(0)}</p>
              </div>
              <TrendingDown className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-amber-700 font-medium">Net Daily Flow</p>
                <p className={`text-2xl font-bold ${(avgDailyIncome - avgDailyExpenses) >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  â‚¹{(avgDailyIncome - avgDailyExpenses).toFixed(0)}
                </p>
              </div>
              <Calculator className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Cash Flow Balance Over Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={balanceData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Area 
                  type="monotone" 
                  dataKey="balance" 
                  stroke="#f59e0b" 
                  fill="url(#colorBalance)" 
                />
                <defs>
                  <linearGradient id="colorBalance" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#f59e0b" stopOpacity={0.8}/>
                    <stop offset="95%" stopColor="#f59e0b" stopOpacity={0}/>
                  </linearGradient>
                </defs>
              </AreaChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Daily Cash Flow</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={balanceData.slice(-14)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="income" fill="#10b981" name="Income" />
                <Bar dataKey="expenses" fill="#ef4444" name="Expenses" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
          <CardHeader>
            <CardTitle>Weekly Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {weeklyData.slice(-4).map((week, index) => (
                <div key={index} className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-semibold text-gray-900">{week.week}</h4>
                    <span className={`font-bold ${week.netFlow >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {week.netFlow >= 0 ? '+' : ''}â‚¹{week.netFlow.toLocaleString('en-IN')}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">Income: </span>
                      <span className="font-medium text-green-600">â‚¹{week.income.toLocaleString('en-IN')}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Expenses: </span>
                      <span className="font-medium text-red-600">â‚¹{week.expenses.toLocaleString('en-IN')}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

file CashFlow Ended

directory finance ended
directory components ended

Under Directory Entities

file Supplier start

{
  "name": "Supplier",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Supplier name"
    },
    "contact_person": {
      "type": "string",
      "description": "Primary contact person"
    },
    "phone": {
      "type": "string",
      "description": "Phone number"
    },
    "email": {
      "type": "string",
      "description": "Email address"
    },
    "address": {
      "type": "string",
      "description": "Supplier address"
    },
    "supplier_type": {
      "type": "string",
      "enum": [
        "butter_vendor",
        "packaging_vendor",
        "other"
      ],
      "description": "Type of supplier"
    },
    "status": {
      "type": "string",
      "enum": [
        "active",
        "inactive"
      ],
      "default": "active",
      "description": "Supplier status"
    }
  },
  "required": [
    "name",
    "supplier_type"
  ]
}

file Supplier Ended


file RawMaterial start

{
  "name": "RawMaterial",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Material name (e.g., Cream Butter, Sunday Butter)"
    },
    "category": {
      "type": "string",
      "enum": [
        "butter",
        "packaging",
        "other"
      ],
      "description": "Material category"
    },
    "unit": {
      "type": "string",
      "enum": [
        "kg",
        "pieces",
        "litres"
      ],
      "description": "Unit of measurement"
    },
    "description": {
      "type": "string",
      "description": "Material description"
    },
    "status": {
      "type": "string",
      "enum": [
        "active",
        "inactive"
      ],
      "default": "active",
      "description": "Material status"
    }
  },
  "required": [
    "name",
    "category",
    "unit"
  ]
}

file RawMaterial Ended


file MaterialIntakeLog start

{
  "name": "MaterialIntakeLog",
  "type": "object",
  "properties": {
    "supplier_id": {
      "type": "string",
      "description": "Reference to supplier"
    },
    "raw_material_id": {
      "type": "string",
      "description": "Reference to raw material"
    },
    "quantity": {
      "type": "number",
      "description": "Quantity received"
    },
    "cost_per_unit": {
      "type": "number",
      "description": "Cost per unit"
    },
    "total_cost": {
      "type": "number",
      "description": "Total cost"
    },
    "lot_number": {
      "type": "string",
      "description": "Lot or batch number from supplier"
    },
    "intake_date": {
      "type": "string",
      "format": "date",
      "description": "Date of material intake"
    },
    "expiry_date": {
      "type": "string",
      "format": "date",
      "description": "Expiry date"
    },
    "quality_notes": {
      "type": "string",
      "description": "Quality assessment notes"
    },
    "remaining_quantity": {
      "type": "number",
      "description": "Remaining unused quantity"
    }
  },
  "required": [
    "supplier_id",
    "raw_material_id",
    "quantity",
    "cost_per_unit",
    "intake_date"
  ]
}

file MaterialIntakeLog Ended


file ProductionBatch start

{
  "name": "ProductionBatch",
  "type": "object",
  "properties": {
    "batch_number": {
      "type": "string",
      "description": "Unique batch identifier"
    },
    "production_date": {
      "type": "string",
      "format": "date",
      "description": "Date of production"
    },
    "output_litres": {
      "type": "number",
      "description": "Total ghee output in litres"
    },
    "total_input_cost": {
      "type": "number",
      "description": "Total cost of input materials"
    },
    "cost_per_litre": {
      "type": "number",
      "description": "Calculated cost per litre"
    },
    "yield_percentage": {
      "type": "number",
      "description": "Yield percentage from inputs"
    },
    "quality_notes": {
      "type": "string",
      "description": "Quality assessment of the batch"
    },
    "status": {
      "type": "string",
      "enum": [
        "in_progress",
        "completed",
        "quality_check",
        "approved"
      ],
      "default": "in_progress",
      "description": "Batch status"
    },
    "completed_by": {
      "type": "string",
      "description": "User who completed the batch"
    }
  },
  "required": [
    "batch_number",
    "production_date"
  ]
}

file ProductionBatch Ended


file BatchInput start

{
  "name": "BatchInput",
  "type": "object",
  "properties": {
    "batch_id": {
      "type": "string",
      "description": "Reference to production batch"
    },
    "material_intake_id": {
      "type": "string",
      "description": "Reference to material intake log"
    },
    "quantity_used": {
      "type": "number",
      "description": "Quantity of material used"
    },
    "cost_allocated": {
      "type": "number",
      "description": "Cost allocated for this input"
    }
  },
  "required": [
    "batch_id",
    "material_intake_id",
    "quantity_used"
  ]
}

file BatchInput Ended


file Customer start

{
  "name": "Customer",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Customer name"
    },
    "phone": {
      "type": "string",
      "description": "Phone number"
    },
    "email": {
      "type": "string",
      "description": "Email address"
    },
    "customer_type": {
      "type": "string",
      "enum": [
        "retail",
        "d2c",
        "restaurant",
        "distributor"
      ],
      "description": "Customer type"
    },
    "tier": {
      "type": "string",
      "enum": [
        "premium",
        "standard",
        "wholesale"
      ],
      "default": "standard",
      "description": "Customer tier for pricing"
    },
    "address": {
      "type": "string",
      "description": "Customer address"
    },
    "city": {
      "type": "string",
      "description": "City"
    },
    "state": {
      "type": "string",
      "description": "State"
    },
    "pincode": {
      "type": "string",
      "description": "Pincode"
    },
    "gst_number": {
      "type": "string",
      "description": "GST number"
    },
    "credit_limit": {
      "type": "number",
      "description": "Credit limit in rupees"
    },
    "payment_terms": {
      "type": "string",
      "enum": [
        "immediate",
        "15_days",
        "30_days",
        "45_days"
      ],
      "default": "immediate",
      "description": "Payment terms"
    },
    "status": {
      "type": "string",
      "enum": [
        "active",
        "inactive",
        "blocked"
      ],
      "default": "active",
      "description": "Customer status"
    },
    "notes": {
      "type": "string",
      "description": "Additional notes"
    }
  },
  "required": [
    "name",
    "customer_type"
  ]
}

file Customer Ended

file Order start

{
  "name": "Order",
  "type": "object",
  "properties": {
    "order_number": {
      "type": "string",
      "description": "Unique order number"
    },
    "customer_id": {
      "type": "string",
      "description": "Reference to customer"
    },
    "order_date": {
      "type": "string",
      "format": "date",
      "description": "Order date"
    },
    "expected_delivery": {
      "type": "string",
      "format": "date",
      "description": "Expected delivery date"
    },
    "status": {
      "type": "string",
      "enum": [
        "pending",
        "confirmed",
        "in_production",
        "ready",
        "dispatched",
        "delivered",
        "cancelled"
      ],
      "default": "pending",
      "description": "Order status"
    },
    "total_amount": {
      "type": "number",
      "description": "Total order amount"
    },
    "discount_amount": {
      "type": "number",
      "default": 0,
      "description": "Discount applied"
    },
    "tax_amount": {
      "type": "number",
      "description": "Tax amount"
    },
    "net_amount": {
      "type": "number",
      "description": "Net payable amount"
    },
    "payment_status": {
      "type": "string",
      "enum": [
        "pending",
        "partial",
        "paid",
        "overdue"
      ],
      "default": "pending",
      "description": "Payment status"
    },
    "notes": {
      "type": "string",
      "description": "Order notes"
    }
  },
  "required": [
    "order_number",
    "customer_id",
    "order_date"
  ]
}

file Order Ended
directory Entities ended 
Layout.js file started

import React from "react";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  LayoutDashboard, 
  Package, 
  Factory, 
  ShoppingCart, 
  Users, 
  CreditCard,
  Menu,
  LogOut
} from "lucide-react";
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarHeader,
  SidebarFooter,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { User } from "@/entities/User";

const navigationItems = [
  {
    title: "Dashboard",
    url: createPageUrl("Dashboard"),
    icon: LayoutDashboard,
  },
  {
    title: "Material Intake",
    url: createPageUrl("MaterialIntake"),
    icon: Package,
  },
  {
    title: "Production",
    url: createPageUrl("Production"),
    icon: Factory,
  },
  {
    title: "Orders",
    url: createPageUrl("Orders"),
    icon: ShoppingCart,
  },
  {
    title: "Customers",
    url: createPageUrl("Customers"),
    icon: Users,
  },
  {
    title: "Finance",
    url: createPageUrl("Finance"),
    icon: CreditCard,
  },
];

export default function Layout({ children, currentPageName }) {
  const location = useLocation();
  const [user, setUser] = React.useState(null);

  React.useEffect(() => {
    const loadUser = async () => {
      try {
        const currentUser = await User.me();
        setUser(currentUser);
      } catch (error) {
        console.log("User not logged in");
      }
    };
    loadUser();
  }, []);

  const handleLogout = async () => {
    await User.logout();
    window.location.reload();
  };

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full bg-gradient-to-br from-amber-50 to-orange-50">
        <Sidebar className="border-r border-amber-200 bg-white/80 backdrop-blur-sm">
          <SidebarHeader className="border-b border-amber-100 p-6">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-amber-400 to-orange-500 rounded-xl flex items-center justify-center shadow-lg">
                <span className="text-white font-bold text-lg">G</span>
              </div>
              <div>
                <h2 className="font-bold text-gray-900 text-lg">GheeRoots</h2>
                <p className="text-xs text-amber-600 font-medium">Tracking Platform</p>
              </div>
            </div>
          </SidebarHeader>
          
          <SidebarContent className="p-3">
            <SidebarGroup>
              <SidebarGroupLabel className="text-xs font-semibold text-amber-700 uppercase tracking-wider px-3 py-2">
                Operations
              </SidebarGroupLabel>
              <SidebarGroupContent>
                <SidebarMenu>
                  {navigationItems.map((item) => (
                    <SidebarMenuItem key={item.title}>
                      <SidebarMenuButton 
                        asChild 
                        className={`hover:bg-amber-100 hover:text-amber-800 transition-all duration-200 rounded-xl mb-1 ${
                          location.pathname === item.url 
                            ? 'bg-gradient-to-r from-amber-100 to-orange-100 text-amber-800 shadow-sm border border-amber-200' 
                            : 'text-gray-600'
                        }`}
                      >
                        <Link to={item.url} className="flex items-center gap-3 px-4 py-3">
                          <item.icon className="w-5 h-5" />
                          <span className="font-medium">{item.title}</span>
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  ))}
                </SidebarMenu>
              </SidebarGroupContent>
            </SidebarGroup>
          </SidebarContent>

          <SidebarFooter className="border-t border-amber-100 p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center">
                  <span className="text-white font-semibold text-sm">
                    {user?.full_name?.[0] || 'U'}
                  </span>
                </div>
                <div className="flex-1 min-w-0">
                  <p className="font-medium text-gray-900 text-sm truncate">
                    {user?.full_name || 'User'}
                  </p>
                  <p className="text-xs text-amber-600 truncate">
                    {user?.role === 'admin' ? 'Founder' : 'Team Member'}
                  </p>
                </div>
              </div>
              <button
                onClick={handleLogout}
                className="p-2 hover:bg-amber-100 rounded-lg transition-colors duration-200"
                title="Logout"
              >
                <LogOut className="w-4 h-4 text-gray-500" />
              </button>
            </div>
          </SidebarFooter>
        </Sidebar>

        <main className="flex-1 flex flex-col">
          <header className="bg-white/90 backdrop-blur-sm border-b border-amber-100 px-6 py-4 md:hidden">
            <div className="flex items-center gap-4">
              <SidebarTrigger className="hover:bg-amber-100 p-2 rounded-lg transition-colors duration-200">
                <Menu className="w-5 h-5" />
              </SidebarTrigger>
              <h1 className="text-xl font-bold text-gray-900">GheeRoots</h1>
            </div>
          </header>

          <div className="flex-1 overflow-auto">
            {children}
          </div>
        </main>
      </div>
    </SidebarProvider>
  );
}

Layout.js file started

GSR_Operations Directory ended